<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PDCoreLib</name>
    </assembly>
    <members>
        <member name="T:PrecisionDiscovery.Auth.Utility.ApplicationHelper">
            <summary>
            Helps with resolving resource IDs
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Auth.Utility.ApplicationHelper._lock">
            <summary>
            Sync lock
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Auth.Utility.ApplicationHelper.PopulateActionCache(PrecisionDiscovery.AuthClient.IPDAuthentication,System.Boolean)">
            <summary>
            Populates the action cache.
            </summary>
            <param name="auth">The auth server.</param>
            <param name="force">if set to <c>true</c> force the update to refresh the cache..</param>
        </member>
        <member name="M:PrecisionDiscovery.Auth.Utility.ApplicationHelper.PopulateActionCache(PrecisionDiscovery.Authentication.IPDApplication[],System.Boolean)">
            <summary>
            Populates the action cache.
            </summary>
            <param name="allApps">All apps.</param>
            <param name="force">if set to <c>true</c> force the update to refresh the cache..</param>
        </member>
        <member name="M:PrecisionDiscovery.Auth.Utility.ApplicationHelper.TryToResolveAction(System.String)">
            <summary>
            Tries to resolve action.
            </summary>
            <param name="actionName">Name of the action.</param>
            <returns>ID of the action</returns>
        </member>
        <member name="M:PrecisionDiscovery.Auth.Utility.ApplicationHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Auth.Utility.ApplicationHelper" /> class. For use in derived classes.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.AuthActions">
            <summary>
            Commonly used actions.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.View">
            <summary>
            Permission to view
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.Edit">
            <summary>
            Permission to Edit
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.Add">
            <summary>
            Permission to Add
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.Delete">
            <summary>
            Permission to delete
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.AddMember">
            <summary>
            Permission to add a member
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.AddRole">
            <summary>
            Permission to add a role
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.DeleteRole">
            <summary>
            Permission to delete a role
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.EditRole">
            <summary>
            Permission to edit a role
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.AuthActions.RemoveMember">
            <summary>
            Permission to remove a member
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.ExtNinjectModule">
            <summary>
            Authentication module for configuring service clients
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ExtNinjectModule.ConfigureAuthentication(PrecisionDiscovery.Container.NinjectConfig,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add the authentication client to Ninject
            </summary>		
            <param name="config">The config.</param>
            <param name="uri">The URI for the service.</param>
            <param name="configure">The configure action.</param>
            <remarks>This method requires you provide all the parameters</remarks>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ExtNinjectModule.ConfigureAuthentication(PrecisionDiscovery.Container.NinjectConfig,System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add authentication client to Ninject and configure through Vasa
            </summary>
            <param name="config">The config.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">The configure action.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ExtNinjectModule.ConfigureAuthentication(PrecisionDiscovery.Container.NinjectConfig,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Configures the authentication with default settings
            </summary>
            <param name="config">The config.</param>
            <param name="configure">The configure action.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.Configuration.PopulateStaticApplicationHelperAction">
            <summary>
            Auto populate the ApplicationHelper
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Configuration.PopulateStaticApplicationHelperAction.Title">
            <summary>
            Return something meaningful here
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.Configuration.PopulateStaticApplicationHelperAction.Execute(Ninject.IKernel)">
            <summary>
            This will get called in NO PARTICULAR ORDER after container is initialized.
            But before application resumes from initializing container.
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.Configuration.PopulateStaticApplicationHelperAction.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.PDAuthenticationClient">
            <summary>
            Concrete implementation of the IAuthentication interface. Implements the client that talks to the Authentication Service.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDAuthenticationClient" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDAuthenticationClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDAuthenticationClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDAuthenticationClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDAuthenticationClient" /> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.Ping">
            <summary>
            Pings this instance, testing if the service is up and responsive.
            </summary>
            <returns>
            A string - doesn't really matter what it is as long as it is not null or empty
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AuthenticateUser(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetAllApplications(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all applications for a user.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>
            An array of applications.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetApplicationById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the application by app id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="applicationId">The application id.</param>
            <returns>
            An application.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetAllResources(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all resources.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>
            An array of resources.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetResourceById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resource by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetResourcesByFamily(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resources by family.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>
            An array of resources.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetUserResourcesByFamily(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Gets the user resources by family.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <param name="familyName">Name of the family.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetResourceTemplates(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resource templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>
            An array of resources.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetResorceRolesTemplates(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resorce roles templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>
            An array of roles.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.ApplyResourceRoleTemplate(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String)">
            <summary>
            Applies the resource role template.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="roleName">Name of the role.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetAllUsers(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all users.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>
            An array of users.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetUserById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the user by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetUsersByOrgId(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the users by org id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="orgId">The org id.</param>
            <returns>
            An array of users.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.GetUsersWithAccess(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Gets the users with access to a resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>
            An array of users.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser,System.String)">
            <summary>
            Adds a new user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The user.</param>
            <param name="password">The new user's password.</param>
            <returns>The new user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser,System.String,System.String)">
            <summary>
            Adds a new user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The user.</param>
            <param name="password">The new password.</param>
            <param name="template">The template.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser)">
            <summary>
            Updates the user data.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userData">The user data.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.ResetUserPassword(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Resets the user password.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="password">The password.</param>
            <param name="userId">The user id.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.CheckAccess(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Checks the access for the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>
            True if access is allowed.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewResourceDefault(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDResource)">
            <summary>
            Adds the new resource default.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="family">The family.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="family">The family.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <param name="template">The template.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewResource(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDResource,System.String,System.String)">
            <summary>
            Adds the new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <param name="template">The template.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateResource(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDResource,System.String)">
            <summary>
            Updates the resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.DeleteResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Deletes a resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>
            True if deletion was successful.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewRoleToResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new role to resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="roleName">Name of the role.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddNewRoleToResource(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDRole,System.String)">
            <summary>
            Adds the new role to resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="role">The role.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="name">The name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateRole(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDRole,System.String)">
            <summary>
            Updates the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="role">The role.</param>
            <param name="roleId">The role id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Updates a resources with new information.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="name">The resource name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.UpdateResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String)">
            <summary>
            Updates a resource with new information.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.DeleteRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Deletes the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddPermissionsToRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String[])">
            <summary>
            Adds the permissions to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="permissions">The permissions.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.RemovePermissionFromRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String[])">
            <summary>
            Removes the permission from a role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="permissions">The permissions.</param>
            <returns>
            The resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.AddUserToRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Adds the user to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="userId">The user id.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.RemoveUserFromRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Removes the user from a role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="userId">The user id.</param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDAuthenticationClient.ClearAllAuthCaches(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Clears all auth caches.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.ApplicationAction">
            <summary>
            Action that user is allowed to perform.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ApplicationAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.ApplicationAction"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ApplicationAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.ApplicationAction"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ApplicationAction.#ctor(PrecisionDiscovery.Authentication.IApplicationAction)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.ApplicationAction" /> class.
            </summary>
            <param name="appAction">The app action.</param>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.ApplicationAction._name">
            <summary>
            Name of the action
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.ApplicationAction._description">
            <summary>
            Description of action
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.ApplicationAction._displayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ApplicationAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ApplicationAction.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ApplicationAction.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.ClientInfo">
            <summary>
            Contains information about a client
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.ClientInfo.HeaderName">
            <summary>
            Name of the Header
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ClientInfo.Name">
            <summary>
            Name of client
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ClientInfo.Machine">
            <summary>
            Name of the machine the client is running on
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ClientInfo.ServiceHeader">
            <summary>
            A properly formatted service header using the class properties
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ClientInfo.DecodeHeader(PrecisionDiscovery.Net.ServiceRequest.ServiceHeader)">
            <summary>
            Decodes a serviceheader into an IClientInfo object if possible
            </summary>
            <param name="header">The header that contains a ClientInfo header</param>
            <returns>A new instance of IClientInfo or null if it does not exist</returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.PDApplication">
            <summary>
            an application or logical group of permissions
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDApplication"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDApplication.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDApplication"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDApplication.#ctor(PrecisionDiscovery.Authentication.IPDApplication)">
            <summary>
            
            </summary>
            <param name="app"></param>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDApplication._name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDApplication._description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDApplication._displayName">
            <summary>
            Display Name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDApplication._actions">
            <summary>
            Actions available for this application.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDApplication.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDApplication.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDApplication.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDApplication.AvailableActions">
            <summary>
            Gets the available actions.
            </summary>
            <value>The available actions.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.PDUser">
            <summary>
            A User of the system.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDUser"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDUser"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.#ctor(PrecisionDiscovery.Authentication.IPDUser)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDUser"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDUser._resourceInfo">
            <summary>
            Resources that user has access to.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDUser._displayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.FirstName">
            <summary>
            Gets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.LastName">
            <summary>
            Gets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.MiddleInitial">
            <summary>
            Gets the middle initial.
            </summary>
            <value>The middle initial.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Address">
            <summary>
            Gets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Phone">
            <summary>
            Gets the phone.
            </summary>
            <value>The phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.CellPhone">
            <summary>
            Gets the cell phone.
            </summary>
            <value>The cell phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.OfficePhone">
            <summary>
            Gets the office phone.
            </summary>
            <value>The office phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Fax">
            <summary>
            Gets the fax.
            </summary>
            <value>The fax.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Email">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Family">
            <summary>
            Gets the family.
            </summary>
            <value>The family.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.FamilyId">
            <summary>
            Gets the family id.
            </summary>
            <value>The family id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.OrgId">
            <summary>
            Gets the org id.
            </summary>
            <value>The org id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.LoginId">
            <summary>
            Gets the login id.
            </summary>
            <value>The login id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Active">
            <summary>
            Gets a value indicating whether this <see cref="T:PrecisionDiscovery.Authentication.IPDUser"/> is active.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>MO
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Password">
            <summary>
            Gets or sets the password.
            This might look like it is not used, and it shouldn't be, except during user creation where we need to pass the value to the server
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDUser.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.CheckAccess(System.String,System.String)">
            <summary>
            Checks users access for an action on a resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <param name="actionName">The action name.</param>
            <returns>
            	<c>true</c> if user has permission.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.CheckApplicationActionAccess(System.String)">
            <summary>
            Checks user's access to any resource for an action.
            </summary>
            <param name="actionName">The action name.</param>
            <returns>
            	<c>true</c> if user has permission to perform action on any resource.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.CheckResourceAccess(System.String)">
            <summary>
            Check to see if user has any permission on a specific resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <returns>
            	<c>true</c> if user has any permission for the specified resource; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.GetRolesForResource(System.String)">
            <summary>
            Gets the users roles for resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <returns>
            List of all of user's roles for the specified resource.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDUser.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.ResourceInfo">
            <summary>
            Helper class to store user resources and permissions
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ResourceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.ResourceInfo"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.ResourceInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.ResourceInfo"/> class.
            </summary>
            <param name="resourceID">The resource ID.</param>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ResourceInfo.ResourceID">
            <summary>
            Gets or sets the resource ID.
            </summary>
            <value>The resource ID.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ResourceInfo.Actions">
            <summary>
            Gets or sets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.ResourceInfo.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.PDResource">
            <summary>
            A resource, anything that can have access control.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDResource"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDResource"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDResource.#ctor(PrecisionDiscovery.Authentication.IPDResource)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDResource" /> class.
            </summary>
            <param name="resource">The resource interface.</param>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._family">
            <summary>
            Logical resource family
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._familyId">
            <summary>
            ID of the resource family
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._displayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDResource._roles">
            <summary>
            Roles assigned to this resource
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.Family">
            <summary>
            Gets the family of the resource.
            </summary>
            <value>The family.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.FamilyId">
            <summary>
            Gets the family id.
            </summary>
            <value>The family id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDResource.Roles">
            <summary>
            Gets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDAuthenticationService">
            <summary>
            Interface for the Authentication Service
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.Ping">
            <summary>
            Pings this instance.
            </summary>
            <returns>Some string. Not really important as long as you get one.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AuthenticateUser(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetAllApplications(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Gets all applications.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of the applications.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetApplicationById(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the application by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="applicationId">The application id.</param>
            <returns>The application.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetAllResources(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Gets all resources.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of the resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetResourceById(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the resource by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource..</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetResourcesByFamily(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the resources by family.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyId">The family id.</param>
            <returns>An array of the resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetUserResourcesByFamily(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Gets the user resources by family.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <param name="familyId">The family id.</param>
            <returns>An array of the resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetResourceTemplates(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the resource templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyId">The family id.</param>
            <returns>An array of the resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetResorceRolesTemplates(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the resorce roles templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyId">The family id.</param>
            <returns>An array of the users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ApplyResourceRoleTemplate(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String,System.String)">
            <summary>
            Applies the resource role template.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleName">Name of the role.</param>
            <param name="resourceId">The resource id.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetAllUsers(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Gets all users.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of the users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetUserById(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the user by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetUsersByOrgId(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Gets the users by org id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="orgId">The org id.</param>
            <returns>An array of the users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.GetUsersWithAccess(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Gets the users with access.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>An array of the users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddNewUser(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDUser,System.String,System.String)">
            <summary>
            Adds the new user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The user.</param>
            <param name="password">The new user's password</param>
            <param name="template">The template.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.UpdateUser(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDUser)">
            <summary>
            Updates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userData">The user data.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ResetUserPassword(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Resets the user password.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="password">The password.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.CheckAccess(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Checks the access.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>True if access is allowed.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddNewResourceDefault(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDResource)">
            <summary>
            Adds the new resource default.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddNewResource(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDResource,System.String,System.String)">
            <summary>
            Adds the new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <param name="template">The template.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.UpdateResource(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDResource,System.String)">
            <summary>
            Updates the resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resource">The resource.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.DeleteResource(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>True if deletion was successful.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddNewRoleToResource(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDRole,System.String)">
            <summary>
            Adds the new role to resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="role">The role.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.UpdateRole(PrecisionDiscovery.Authentication.UserCredentials,PrecisionDiscovery.Authentication.PDRole,System.String)">
            <summary>
            Updates the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="role">The role.</param>
            <param name="roleId">The role id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.DeleteRole(PrecisionDiscovery.Authentication.UserCredentials,System.String)">
            <summary>
            Deletes the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddPermissionsToRole(PrecisionDiscovery.Authentication.UserCredentials,System.String[],System.String)">
            <summary>
            Adds the permissions to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="permissions">The permissions.</param>
            <param name="roleId">The role id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.RemovePermissionFromRole(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String[])">
            <summary>
            Removes the permission from role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="permissions">The permissions.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.AddUserToRole(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Adds the user to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <param name="roleId">The role id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.RemoveUserFromRole(PrecisionDiscovery.Authentication.UserCredentials,System.String,System.String)">
            <summary>
            Removes the user from role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ClearAllAuthCaches(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Clears all auth caches.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ClearPDAuthCache(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Clears the local PDAuth cache
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ClearResourceCache(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Clears the AuthCache for resources
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ClearUserCache(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Clears the AuthCache for users
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDAuthenticationService.ClearAppCache(PrecisionDiscovery.Authentication.UserCredentials)">
            <summary>
            Clears the AuthCache for applications
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IClientInfo">
            <summary>
            Interface for Client information
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IClientInfo.Name">
            <summary>
            Name of the client
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IClientInfo.Machine">
            <summary>
            Name of the machine the client is running on
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IClientInfo.ServiceHeader">
            <summary>
            A properly formatted service header
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.PDRole">
            <summary>
            Group of permissions that can be give to a user and assigned to a resource.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDRole"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDRole"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.PDRole.#ctor(PrecisionDiscovery.Authentication.IPDRole)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.PDRole" /> class.
            </summary>
            <param name="role">The role interface.</param>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDRole._name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDRole._description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDRole._displayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Authentication.PDRole._actionIDs">
            <summary>
            Actions this role can perform
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDRole.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDRole.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDRole.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.PDRole.ActionIDs">
            <summary>
            Gets the action I ds.
            </summary>
            <value>The action I ds.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.UserCredentials">
            <summary>
            Implementation of IUserCredentials.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.UserCredentials.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of user credentials.
            </summary>
            <param name="userId">User ID</param>
            <param name="password">Password</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.UserCredentials.#ctor(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.UserCredentials" /> class.
            </summary>
            <param name="creds">The creds.</param>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.UserCredentials.Create(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Helper method to generate a new cpm
            </summary>
            <param name="credentials"></param>
            <returns></returns>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.UserCredentials.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.UserCredentials.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.UserCredentials.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.Juniper.UserJuniperData">
            <summary>
            Users access information.
            Probably should be renamed since we don't use Juniper anymore.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.Juniper.UserJuniperData"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Authentication.Juniper.UserJuniperData"/> class.
            </summary>
            <param name="groupId">The group id.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <param name="hasAccess">if set to <c>true</c> [has access].</param>
            <param name="canHaveAccess">if set to <c>true</c> [can have access].</param>
            <param name="canEditAccess">if set to <c>true</c> [can edit access].</param>
            <param name="canCurrentUserModify">if set to <c>true</c> [can current user modify].</param>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.GroupId">
            <summary>
            Groups Unique ID (from VASA)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.DisplayName">
            <summary>
            Name to display to the user. (from VASA)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.Description">
            <summary>
            Description of the group. (from VASA)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.HasAccess">
            <summary>
            If the user currently has access
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.CanHaveAccess">
            <summary>
            Can the user have access
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.CanEditAccess">
            <summary>
            Can the user's access be modified.
            This will be false for users that have access but not through PDADE system.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.Juniper.UserJuniperData.CanCurrentUserModify">
            <summary>
            Does current user have premission to modify this access.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IApplicationAction">
            <summary>
            Action that user is allowed to perform.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IApplicationAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IApplicationAction.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IApplicationAction.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDApplication">
            <summary>
            An application or logical group of actions.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDApplication.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDApplication.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDApplication.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDApplication.AvailableActions">
            <summary>
            Gets the available actions.
            </summary>
            <value>The available actions.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDResource">
            <summary>
            A resource, anything that can have access premissions.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.Family">
            <summary>
            Gets the family of the resource.
            </summary>
            <value>The family.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.FamilyId">
            <summary>
            Gets the family id.
            </summary>
            <value>The family id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDResource.Roles">
            <summary>
            Gets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDRole">
            <summary>
            Group of permissions or actions, that can be given to a user for a resource.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDRole.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDRole.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDRole.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDRole.ActionIDs">
            <summary>
            Gets the action I ds.
            </summary>
            <value>The action I ds.</value>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDUser">
            <summary>
            Identifies a user of the system.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.FirstName">
            <summary>
            Gets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.LastName">
            <summary>
            Gets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.MiddleInitial">
            <summary>
            Gets the middle initial.
            </summary>
            <value>The middle initial.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Address">
            <summary>
            Gets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Phone">
            <summary>
            Gets the phone.
            </summary>
            <value>The phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.CellPhone">
            <summary>
            Gets the cell phone.
            </summary>
            <value>The cell phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.OfficePhone">
            <summary>
            Gets the office phone.
            </summary>
            <value>The office phone.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Fax">
            <summary>
            Gets the fax.
            </summary>
            <value>The fax.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Email">
            <summary>
            Gets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Family">
            <summary>
            Gets the family.
            </summary>
            <value>The family.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.OrgId">
            <summary>
            Gets the org id.
            </summary>
            <value>The org id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.LoginId">
            <summary>
            Gets the login id.
            </summary>
            <value>The login id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.FamilyId">
            <summary>
            Gets the family id.
            </summary>
            <value>The family id.</value>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IPDUser.Active">
            <summary>
            Gets a value indicating whether this <see cref="T:PrecisionDiscovery.Authentication.IPDUser"/> is active.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDUser.CheckAccess(System.String,System.String)">
            <summary>
            Checks users access for an action on a resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <param name="actionName">The action name.</param>
            <returns><c>true</c> if user has permission.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDUser.CheckApplicationActionAccess(System.String)">
            <summary>
            Checks user's access to any resource for an action.
            </summary>
            <param name="actionName">The action name.</param>
            <returns><c>true</c> if user has permission to perfomr action on any resource.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDUser.CheckResourceAccess(System.String)">
            <summary>
            Check to see if user has any permission on a specific resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <returns><c>true</c> if user has any permission for the specified resource; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDUser.GetRolesForResource(System.String)">
            <summary>
            Gets the users roles for resource.
            </summary>
            <param name="resourceId">The resource id.</param>
            <returns>List of all of user's roles for the specified resource.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IPDUserExt">
            <summary>
            Extensions for IPDUser
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IPDUserExt.Details(PrecisionDiscovery.Authentication.IPDUser)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="user">The user.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IUserCredentials">
            <summary>
            User credentials.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IUserCredentials.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Authentication.IUserCredentials.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Authentication.IUserCredentialsExt">
            <summary>
            Extensions for IUserCredentials
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IUserCredentialsExt.Details(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="creds">The creds.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Authentication.IUserCredentialsExt.IsValid(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Determines whether the specified creds have values for the UserID and Password. This does not validate that the creds actually exist within the auth system.
            </summary>
            <param name="creds">The creds.</param>
            <returns>
              <c>true</c> if the specified creds is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.AuthClient.IPDAuthentication">
            <summary>
            Client interface for authentication services
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AuthenticateUser(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Authenticates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddNewUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser,System.String)">
            <summary>
            Adds a new user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The new user.</param>
            <param name="password">The new user's password.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddNewUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser,System.String,System.String)">
            <summary>
            Adds a new user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="user">The new user.</param>
            <param name="password">The new user's password.</param>
            <param name="template">The template.</param>
            <returns>The user./// </returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetUserById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the user by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetUserResourcesByFamily(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Gets the user resources by family name.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userId">The user id.</param>
            <param name="familyName">Name of the family.</param>
            <returns>An array of resources</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetUsersByOrgId(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the users by org id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="orgId">The org id.</param>
            <returns>An array of users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetUsersWithAccess(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Gets the users with access to a resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>An array of users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.ResetUserPassword(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Resets the user password.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="password">The password.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.UpdateUser(PrecisionDiscovery.Authentication.IUserCredentials,PrecisionDiscovery.Authentication.IPDUser)">
            <summary>
            Updates the user data.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="userData">The user data.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetAllUsers(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all users.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of users.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.CheckAccess(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Checks the access for the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="actionId">The action id.</param>
            <returns>True if access is allowed.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetAllApplications(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all applications for a user.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of applications.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetApplicationById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the application by app id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="applicationId">The application id.</param>
            <returns>An application.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddNewResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="family">The family.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddNewResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="family">The family.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <param name="template">The template.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddNewRoleToResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new role to resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="roleName">Name of the role.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.DeleteResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Deletes a resource.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>True if deletion was successful.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.UpdateResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Updates a resources information.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="name">The name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.UpdateResource(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String)">
            <summary>
            Updates a resource with new information.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetAllResources(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Gets all resources.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>An array of resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetResourceById(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resource by id.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetResourcesByFamily(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resources by family name.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>An array of resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetResourceTemplates(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resource templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>An array of resources.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddPermissionsToRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String[])">
            <summary>
            Adds the permissions to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="permissions">The permissions.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.AddUserToRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Adds the user to role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.ApplyResourceRoleTemplate(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String)">
            <summary>
            Applies the resource role template.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="resourceId">The resource id.</param>
            <param name="roleName">Name of the role.</param>
            <param name="templatePrefix">The template prefix.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.RemovePermissionFromRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String[])">
            <summary>
            Removes the permission from a role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="permissions">The permissions.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.RemoveUserFromRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Removes the user from a role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="userId">The user id.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.DeleteRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Deletes the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.UpdateRole(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the role.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="roleId">The role id.</param>
            <param name="name">The name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.GetResorceRolesTemplates(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the resorce roles templates.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="familyName">Name of the family.</param>
            <returns>An array of roles.</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.Ping">
            <summary>
            Pings this instance, testing if the service is up and responsive.
            </summary>
            <returns>A string - doesn't really matter what it is as long as it is not null or empty</returns>
        </member>
        <member name="M:PrecisionDiscovery.AuthClient.IPDAuthentication.ClearAllAuthCaches(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Clears all auth caches.
            </summary>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="T:PrecisionDiscovery.Collections.ITimeLinkItem">
            <summary>
            Bare minimum for a time boxed link
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ITimeLinkItem.Id">
            <summary>
            Gets the id of the link
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ITimeLinkItem.StartDate">
            <summary>
            Gets the start date, if null Link starts from begining of time.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ITimeLinkItem.EndDate">
            <summary>
            Gets the end date, if null Link ends at end of time.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ITimeLinkItem.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Collections.TimeLinkItem">
            <summary>
            Simple implementation of ITimeLinkItemEx
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeLinkItem.#ctor(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Collections.TimeLinkItem" /> class.
            </summary>
            <param name="id">The id.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
        </member>
        <member name="P:PrecisionDiscovery.Collections.TimeLinkItem.Id">
            <summary>
            Gets the id of the link
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.TimeLinkItem.StartDate">
            <summary>
            Gets the start date, if null Link starts from begining of time.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.TimeLinkItem.EndDate">
            <summary>
            Gets the end date, if null Link ends at end of time.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Collections.TimeLinkItem.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Collections.TimeBoxedList`1">
            <summary>
            List of items that are time boxed
            </summary>
            <typeparam name="TLink">The type of the link.</typeparam>
        </member>
        <member name="F:PrecisionDiscovery.Collections.TimeBoxedList`1._items">
            <summary>
            The _items
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Collections.TimeBoxedList`1" /> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Collections.TimeBoxedList`1" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedList`1.GetItems(System.DateTime,System.Boolean)">
            <summary>
            Gets the items that are effective at a given time.
            </summary>
            <param name="effectiveDate">The effective date.</param>
            <param name="filterInactive">if set to <c>true</c> [filter inactive].</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedList`1.GetAllItems(System.Boolean)">
            <summary>
            Gets all items.
            </summary>
            <param name="filterInactive">if set to <c>true</c> [filter inactive].</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedList`1.Add(`0)">
            <summary>
            Adds the specified link.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="T:PrecisionDiscovery.Collections.TimeBoxedListExtensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.TimeBoxedListExtensions.ToString``1(PrecisionDiscovery.Collections.ITimeLinkItem)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Collections.ThreadSafeDictionary`2">
            <summary>
            Thread safe Dictionary, suitable for many reads and few writes.
            </summary>
            <typeparam name="TKey">Key Type</typeparam>
            <typeparam name="TValue">Value Type</typeparam>
            <remarks>
            All functions are thread safe.  
            All return values are from the current snapshot.
            Enumerators are from the current snapshot.
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Add a key/value pare to the dictionary.  This is thread safe. Will not throw on duplicate key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <remarks>Unlike standard dictionary, this will not throw on duplicate key, making it possible for multiple threads to add the same key value simultaneously.
            Use SafeAdd if it is important to know if the value originally existed.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.SafeAdd(`0,`1)">
            <summary>
            Add a key/value pare to the dictionary, report if key already exists.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>True if value was added, false if it was not because it already exists.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Check to see if a key exists in the list.
            </summary>
            <param name="key">Key</param>
            <returns>True if it does, False if it doesn't.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Keys">
            <summary>
            Get a list of the keys
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Remove a key from the dictionary
            </summary>
            <param name="key">Key</param>
            <returns>True if removed, False if key didn't exist.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get a value from the list.
            </summary>
            <param name="key">Key</param>
            <param name="value">out Value</param>
            <returns>True if succeeds False if it doesn't.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Values">
            <summary>
            Get a list of values in the dictionary.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Get or set the value for a specific key. Will throw if key doesn't exist.
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a key value pair to the dictionary.  Will not throw on duplicate keys.
            </summary>
            <param name="item">KeyValuePair</param>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Clear the content of the dictionary.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Check to see if the dictionary contains a key value pair with matching key (not the value)
            </summary>
            <param name="item">KeyValuePair</param>
            <returns>True if there is a match, false if there is not.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy the values to an array.
            </summary>
            <param name="array">The array</param>
            <param name="arrayIndex">start index.</param>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Hmmm what do you think this does?
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove item with matching key (not value)
            </summary>
            <param name="item"></param>
            <returns>True if it did, False if it didn't</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>Enumarator</returns>
        </member>
        <member name="M:PrecisionDiscovery.Collections.ThreadSafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="T:PrecisionDiscovery.Components.Contact">
            <summary>
            Contact data object.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.Contact.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.Contact.#ctor(PrecisionDiscovery.Components.IContact)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="that">The source</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Id">
            <summary>
            Gets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.OrganizationId">
            <summary>
            Gets or Sets the OrganizationId this contact belongs to
            </summary>
            <value>
            The OrgnaziationId.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Address">
            <summary>
            Gets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Phone">
            <summary>
            Gets the phone number
            </summary>
            <value>
            The phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.OfficePhone">
            <summary>
            Gets the office phone.
            </summary>
            <value>
            The office phone.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.CellPhone">
            <summary>
            Gets the cell phone number
            </summary>
            <value>
            The cell phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Fax">
            <summary>
            Gets the fax number
            </summary>
            <value>
            The fax number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.Email">
            <summary>
            Gets the email address
            </summary>
            <value>
            The email address
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Contact.PrimaryContact">
            <summary>
            Gets the primary contact.
            </summary>
            <value>
            The primary contact.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.IContact">
            <summary>
            Contact data.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Id">
            <summary>
            Gets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.OrganizationId">
            <summary>
            Gets the OrganizationId this contact belongs to
            </summary>
            <value>
            The OrgnaziationId.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Address">
            <summary>
            Gets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Phone">
            <summary>
            Gets the phone number
            </summary>
            <value>
            The phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.OfficePhone">
            <summary>
            Gets the office phone.
            </summary>
            <value>
            The office phone.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.CellPhone">
            <summary>
            Gets the cell phone number
            </summary>
            <value>
            The cell phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Fax">
            <summary>
            Gets the fax number
            </summary>
            <value>
            The fax number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.Email">
            <summary>
            Gets the email address
            </summary>
            <value>
            The email address
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IContact.PrimaryContact">
            <summary>
            Gets the primary contact.
            </summary>
            <value>
            The primary contact.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.IStatusType">
            <summary>
            Status description of type.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IStatusType.Id">
            <summary>
            Gets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IStatusType.Name">
            <summary>
            Gets the display name of the status.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IStatusType.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.StatusType">
            <summary>
            Status description of various things.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.StatusType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.StatusType" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.StatusType.#ctor(PrecisionDiscovery.Components.IStatusType)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.StatusType" /> class.
            </summary>
            <param name="that">The source of data.</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.StatusType.Id">
            <summary>
            Gets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.StatusType.Name">
            <summary>
            Gets the display name of the status.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.StatusType.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.MatterStatus">
            <summary>
            Status of the Matter
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.MatterStatus.Pending">
            <summary>
            Matter is awaiting Approval
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.MatterStatus.Active">
            <summary>
            Matter is active
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.MatterStatus.Inactive">
            <summary>
            Matter is not active
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.MatterExtensions">
            <summary>
            Extensions for Matter.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.IOrganization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Id">
            <summary>
            Gets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Address">
            <summary>
            Gets the address of the organization
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Office">
            <summary>
            Gets the office phone number
            </summary>
            <value>
            The office phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Fax">
            <summary>
            Gets the fax number for the organization
            </summary>
            <value>
            The fax.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.OrganizationType">
            <summary>
            Gets the type of the organization.
            </summary>
            <value>
            The type of the organization.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.ResourceId">
            <summary>
            Gets the resource id.
            </summary>
            <value>
            The resource id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.CreationDate">
            <summary>
            Gets the Creation Date
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganization.Status">
            <summary>
            Gets the Status
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.IOrganizationContacts">
            <summary>
            Organization with Contacts
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganizationContacts.Organization">
            <summary>
            The Organization
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IOrganizationContacts.Contacts">
            <summary>
            List of Contacts
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.Organization">
            <summary>
            Represents an organization
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.Organization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.Organization" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.Organization.#ctor(PrecisionDiscovery.Components.IOrganization)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.Organization" /> class.
            </summary>
            <param name="that">The source</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Id">
            <summary>
            Gets or sets the Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Address">
            <summary>
            Gets or sets the organization's address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Office">
            <summary>
            Gets or sets the office phone number
            </summary>
            <value>
            The office phone number
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Fax">
            <summary>
            Gets the fax number for the organization
            </summary>
            <value>
            The fax.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.OrganizationType">
            <summary>
            Gets the type of the organization.
            </summary>
            <value>
            The type of the organization.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.ResourceId">
            <summary>
            Gets the resource id.
            </summary>
            <value>
            The resource id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.CreationDate">
            <summary>
            Gets or Sets the Creation Date
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.Organization.Status">
            <summary>
            Gets or Sets the Status
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.OrganizationContacts">
            <summary>
            Organization with Contacts
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.OrganizationContacts.Organization">
            <summary>
            The Organization
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.OrganizationContacts.Contacts">
            <summary>
            List of Contacts
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.OrganizationContacts.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.OrganizationContacts.#ctor(PrecisionDiscovery.Components.Organization,System.Collections.Generic.List{PrecisionDiscovery.Components.Contact})">
            <summary>
            Initializes a new instance
            </summary>
            <param name="organization">The org</param>
            <param name="contacts">The contacts</param>
        </member>
        <member name="T:PrecisionDiscovery.Components.OrgType">
            <summary>
            The type of Organization
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.None">
            <summary>
            There is no type
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.PrecisionDiscovery">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.Banking">
            <summary>
            A Bank
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.Corporation">
            <summary>
            A Corporation
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.Government">
            <summary>
            The Man
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.Individual">
            <summary>
            I think, therefore, I Am
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.LawFirm">
            <summary>
            Suits
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgType.Partnership">
            <summary>
            Aint nothing wrong with that
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.OrgStatus">
            <summary>
            Status of the Org
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgStatus.Active">
            <summary>
            Org is active
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgStatus.Inactive">
            <summary>
            Org is not active
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.OrgRelationship">
            <summary>
            The relationship between the Org and Project
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.OrgRelationship.None">
            <summary>
            There is no relationship
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.OrganizationExtensions">
            <summary>
            Extensions for IOrganization
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.IPDProject">
            <summary>
            Read  only project
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.Id">
            <summary>
            Gets the Project Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.ResourceId">
            <summary>
            Gets the resource id. of the project
            </summary>
            <value>
            The resource id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.Name">
            <summary>
            Gets the Project name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.Notes">
            <summary>
            Gets the Notes
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.Status">
            <summary>
            Gets the Status
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.ProcessingStatus">
            <summary>
            Gets the Processing Status
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IPDProject.HostingStatus">
            <summary>
            Gets the Hosting Status
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.IProjectActiveCase">
            <summary>
            Read only Project with Active Case.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IProjectActiveCase.PDProject">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IProjectActiveCase.PDCase">
            <summary>
            Active Case
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IProjectActiveCase.StartDate">
            <summary>
            The Start Date
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.IProjectActiveCase.EndDate">
            <summary>
            The End Date
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.PDProject">
            <summary>
            Project information
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.PDProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.PDProject" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.PDProject.#ctor(PrecisionDiscovery.Components.IPDProject)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.PDProject" /> class.
            </summary>
            <param name="proj">The proj.</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.Id">
            <summary>
            Gets the Project Id.
            </summary>
            <value>
            The Id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.Name">
            <summary>
            Gets the Project name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.Notes">
            <summary>
            Gets or Sets the Notes
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.ResourceId">
            <summary>
            Gets the resource id. of the project
            </summary>
            <value>
            The resource id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.Status">
            <summary>
            Gets or Sets the Project Status
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.ProcessingStatus">
            <summary>
            Gets or Sets the Processing Status
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.PDProject.HostingStatus">
            <summary>
            Gets or Sets the Hosting Status
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.TimeBoxedProject">
            <summary>
            A project that is time boxed
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.TimeBoxedProject.#ctor(System.Int32,PrecisionDiscovery.Components.PDProject,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.TimeBoxedProject" /> class.
            </summary>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.TimeBoxedProject.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.ProjectActiveCase">
            <summary>
            Project with Active Case
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.ProjectActiveCase.PDProject">
            <summary>
            Get the Project.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.ProjectActiveCase.PDCase">
            <summary>
            Get the Active Case.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.ProjectActiveCase.StartDate">
            <summary>
            The Start Date
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Components.ProjectActiveCase.EndDate">
            <summary>
            The End Date
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.ProjectActiveCase.#ctor(PrecisionDiscovery.Components.PDProject,PrecisionDiscovery.Components.Case)">
            <summary>
            Initialize a new instance
            </summary>
            <param name="pdProject"> the project</param>
            <param name="pdCase">the case</param>
        </member>
        <member name="M:PrecisionDiscovery.Components.ProjectActiveCase.CreateFrom(PrecisionDiscovery.Components.IPDProject,PrecisionDiscovery.Components.ICase,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates a new instance
            </summary>
            <param name="iProject">the project</param>
            <param name="iCase">the case</param>
            <param name="startDate">the start date</param>
            <param name="endDate">the end date</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Components.ProjectExtensions">
            <summary>
            Extensions for IPDProject and project class
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.ProjectExtensions.CheckAccess(PrecisionDiscovery.Components.IPDProject,PrecisionDiscovery.Authentication.IPDUser,System.String)">
            <summary>
            Checks users access to a project
            </summary>
            <param name="project">The project.</param>
            <param name="user">The user.</param>
            <param name="permission">The permissionID (not the name), null if checking for any access</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Components.ProjectOrg">
            <summary>
            Organization that is linked to a projectOrg
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.ProjectOrg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.ProjectOrg"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.ProjectOrg.#ctor(PrecisionDiscovery.Components.IOrganization,PrecisionDiscovery.Components.OrgRelationship)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.ProjectOrg" /> class.
            </summary>
            <param name="that">The source</param>
            <param name="relationship">The project org relationship.</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.ProjectOrg.ProjectOrgRelationship">
            <summary>
            Gets or sets the project org relationship
            </summary>
            <value>
            The project org relationship.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.TimeBoxedProjectOrg">
            <summary>
            A projectOrg that is time boxed
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Components.TimeBoxedProjectOrg.#ctor(System.Int32,PrecisionDiscovery.Components.ProjectOrg,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Components.TimeBoxedProjectOrg" /> class.
            </summary>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
        </member>
        <member name="P:PrecisionDiscovery.Components.TimeBoxedProjectOrg.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Components.ProjectStatus">
            <summary>
            Status of the Project
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProjectStatus.Pending">
            <summary>
            Project is awaiting approval
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProjectStatus.Active">
            <summary>
            Project is active
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProjectStatus.Inactive">
            <summary>
            Project is not active
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.ProcessingStatus">
            <summary>
            Status of Processing
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.NA">
            <summary>
            Does not apply
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Active">
            <summary>
            Processing is active
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Inactive">
            <summary>
            Processing is inactive
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Deleted_ArchivedOffline">
            <summary>
            Processing has been deleted and archived offline
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Deleted_ArchivedNearline">
            <summary>
            Processing has been deleted and archived nearline
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Deleted_ArchivedClient">
            <summary>
            Processing has been deleted and archive was sent to the client
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.ProcessingStatus.Deleted">
            <summary>
            Processing has been deleted
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Components.HostingStatus">
            <summary>
            Status of Hosting
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.NA">
            <summary>
            Does not apply
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Active">
            <summary>
            Processing is active
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Inactive">
            <summary>
            Processing is inactive
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Deleted_ArchivedOffline">
            <summary>
            Processing has been deleted and archived offline
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Deleted_ArchivedNearline">
            <summary>
            Processing has been deleted and archived nearline
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Deleted_ArchivedClient">
            <summary>
            Processing has been deleted and archive was sent to the client
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Components.HostingStatus.Deleted">
            <summary>
            Processing has been deleted
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch">
            <summary>
            Vasa fetch implementation that allows overriding server values in config file.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch.log">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch.VasaConfigFecthAllowValueName">
            <summary>
            If there is a primary fetch specified there should be a value with this name set to "True" for thing to work.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch"/> class.
            With no primary fetch, this means all data will come from the config file.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch.#ctor(PrecisionDiscovery.Configuration.Vasa.IVasaFetch)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch"/> class.
            </summary>
            <param name="primaryFetch">The primary fetch.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfigFetch.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of config sections.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Config name for this VasaClient</param>
            <param name="sectionName">Section name to get</param>
            <returns>
            List of sections if available.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration">
            <summary>
            The VasaConfiguration Configuration Section.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.VasaConfigurationSectionName">
            <summary>
            The XML name of the VasaConfiguration Configuration Section.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.Instance">
            <summary>
            Gets the VasaConfiguration instance.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.XmlnsPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.Xmlns"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.Xmlns">
            <summary>
            Gets the XML namespace of this Configuration Section.
            </summary>
            <remarks>
            This property makes sure that if the configuration file contains the XML namespace,
            the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.EnvironmentsPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.Environments"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaConfiguration.Environments">
            <summary>
            Gets or sets the Environments.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue">
            <summary>
            The VasaValue Configuration Element.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Name"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Name">
            <summary>
            Gets or sets the Name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.ValuePropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Value"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Value">
            <summary>
            Gets or sets the Value.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.ActionPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Action"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Action">
            <summary>
            Gets or sets the Action.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.NotesPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Notes"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue.Notes">
            <summary>
            Gets or sets the Notes.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem">
            <summary>
            A collection of VasaValue instances.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.VasaValuePropertyName">
            <summary>
            The XML name of the individual <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> instances in this collection.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.CreateNewElement">
            <summary>
            Creates a new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/>.
            </summary>
            <returns>
            A new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/>.
            </returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Add(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue)">
            <summary>
            Adds the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaValue">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> to add.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Remove(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue)">
            <summary>
            Removes the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaValue">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> to remove.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaValue"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Name"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Name">
            <summary>
            Gets or sets the Name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.ActionPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Action"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Action">
            <summary>
            Gets or sets the Action.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.NotesPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Notes"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem.Notes">
            <summary>
            Gets or sets the Notes.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment">
            <summary>
            A collection of VasaItem instances.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.VasaItemPropertyName">
            <summary>
            The XML name of the individual <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> instances in this collection.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.CreateNewElement">
            <summary>
            Creates a new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/>.
            </summary>
            <returns>
            A new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/>.
            </returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Add(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem)">
            <summary>
            Adds the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaItem">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> to add.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Remove(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem)">
            <summary>
            Removes the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaItem">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> to remove.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaItem"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.NamePropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Name"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Name">
            <summary>
            Gets or sets the Name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.NotesPropertyName">
            <summary>
            The XML name of the <see cref="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Notes"/> property.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment.Notes">
            <summary>
            Gets or sets the Notes.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments">
            <summary>
            A collection of VasaEnvironment instances.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.VasaEnvironmentPropertyName">
            <summary>
            The XML name of the individual <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> instances in this collection.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.ElementName">
            <summary>
            Gets the name used to identify this collection of elements
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.CreateNewElement">
            <summary>
            Creates a new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/>.
            </summary>
            <returns>
            A new <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/>.
            </returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to retrieve.</param>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.Item(System.Object)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.Add(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment)">
            <summary>
            Adds the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaEnvironment">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to add.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.Remove(PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment)">
            <summary>
            Removes the specified <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> from the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="vasaEnvironment">The <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to remove.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.GetItemAt(System.Int32)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.GetItemByKey(System.String)">
            <summary>
            Gets the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> with the specified key.
            </summary>
            <param name="name">The key of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.VasaEnvironment"/> to retrieve.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigFile.Environments.IsReadOnly">
            <summary>
            Gets a value indicating whether the element is read-only.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ValueActions">
            <summary>
            ValueActions.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ValueActions.Add">
            <summary>
            Add as a new value, potentially creating duplicates
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ValueActions.Remove">
            <summary>
            Remove all values with same name and value
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ValueActions.Replace">
            <summary>
            Replaces content of all values with the same name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ValueActions.RemoveAll">
            <summary>
            Removes all values with the same name, regardless of value content.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ItemActions">
            <summary>
            ItemActions.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ItemActions.Remove">
            <summary>
            Remove all named the same, Values are ignored.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ItemActions.Merge">
            <summary>
            Merge this with all existing named the same
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigFile.ItemActions.Add">
            <summary>
            Add this as a new Item
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain">
            <summary>
            Chaing a list of config sections so the value is picked from the first one that has the value.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain.#ctor(PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain"/> class.
            </summary>
            <param name="first">The first config section in the list.  There has to be at least one..</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain.And(PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Adds another config section to the list. the specified section.
            </summary>
            <param name="section">The section.</param>
            <returns>This</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain.AddSection(PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Adds another config section to the list.
            </summary>
            <param name="section">The section.</param>
            <returns>This</returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigSectionChain.Item(System.String,System.Boolean)">
            <summary>
            Gets the first <see cref="T:System.String"/> with the specified value name.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="valueName">Name of the value.</param>
            <param name="errorOnNull">if set to <c>true</c> it will throw an exeption if no value is found.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.IConfigSectionQuery">
            <summary>
            Interface to help query a configSection and replace the implementation.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.IConfigSectionQuery.Item(System.String,System.Boolean)">
            <summary>
            Get the first value by name.
            </summary>
            <param name="valueName">Value name</param>
            <param name="errorOnNull">Throw exception and log if value is null</param>
            <returns>Value as string or string.empty if not found.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.Testing.FakeConfigsectionBuilder">
            <summary>
            Make fake config sections.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.Testing.FakeConfigsectionBuilder.Environment">
            <summary>
            Name of the Environment
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.Testing.FakeConfigsectionBuilder.AddValue(System.String,System.String)">
            <summary>
            Adds the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.Testing.FakeVasaFetch">
            <summary>
            Use instead of VasaClient for testing purposes.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.Testing.FakeVasaFetch.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of config sections.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Config name for this VasaClient</param>
            <param name="sectionName">Section name to get</param>
            <returns>
            List of sections if available.
            </returns>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.Testing.FakeVasaFetch.AllowNullAuth">
            <summary>
            Gets or sets a value indicating whether [allow null auth].
            Usually should be true.
            </summary>
            <value>
              <c>true</c> if [allow null auth]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.Testing.FakeVasaFetch.AddItem(System.String,System.Action{PrecisionDiscovery.Configuration.Vasa.Testing.FakeConfigsectionBuilder})">
            <summary>
            Adds items to the fake client.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="itemBuildAction">The item build action.</param>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.IVasaClient">
            <summary>
            Interface for Vasa Client
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaClient.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Gets the config sections.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaPost">
            <summary>
            Power on self test for Vasa 
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaPost.#ctor(Ninject.IKernel,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Configuration.Vasa.VasaPost"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="name">The name.</param>
            <param name="configKey">The config key.</param>
            <param name="validationList">The validation list.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaPost.RunTests">
            <summary>
            Override to run your tests in here.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigEnvironment">
            <summary>
            Top level environment, parent of config items.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigEnvironment.Id">
            <summary>
            Environment ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigEnvironment.Name">
            <summary>
            Environment Name
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigItem">
            <summary>
            Descriptor for a configuration item.  This is a child of a configuration environment and parent of values.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigItem.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigItem.EnvironmentId">
            <summary>
            Parent Environment ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigItem.Name">
            <summary>
            Name of the Item
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigSection">
            <summary>
            Result of querying for a config item.
            This class contains the item, parent environment and all the values.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.ConfigSection.log">
            <summary>
            Logger!
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigSection.ConfigEnvironment">
            <summary>
            Parent Environment.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigSection.ConfigItem">
            <summary>
            Item
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigSection.Values">
            <summary>
            Values associated with the item.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigSection.Item(System.String,System.Boolean)">
            <summary>
            Get the first value by name.
            </summary>
            <param name="valueName">Value name</param>
            <param name="errorOnNull">Throw exception and log if value is null</param>
            <returns>Value as string or string.empty if not found.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ConfigValue">
            <summary>
            Configuration value.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigValue.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ConfigValue.#ctor(System.String,System.String)">
            <summary>
             Create a ConfigValue using name and value provided.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigValue.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigValue.ItemId">
            <summary>
            Parent ID
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigValue.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.ConfigValue.Value">
            <summary>
            Value in string format
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.Extensions.EndpointConfig">
            <summary>
            Configure endpoints with Vasa
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.Extensions.EndpointConfig.ConfigureService(PrecisionDiscovery.Configuration.Vasa.ConfigSection,System.ServiceModel.ServiceHost,System.Type)">
            <summary>
            
            </summary>
            <param name="cs">Config section to use</param>
            <param name="hostToConfigure">Host to configure</param>
            <param name="contractType">Type of the contract, null to use Vasa</param>
            <returns>Configured host.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.IVasaCache">
            <summary>
            Caching strategy for Vasa
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaCache.AddConfigSectionsToCache(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.Collections.Generic.List{PrecisionDiscovery.Configuration.Vasa.ConfigSection})">
            <summary>
            Add a list of sections to cache.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Configuration Name for Vasa client.</param>
            <param name="sectionName">Section being added.</param>
            <param name="sections">List of sections to Add.  Should allow null or empty list.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaCache.GetConfigSectionsFromCache(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of sections from the cache
            </summary>
            <param name="credentials">User Credentials</param>
            <param name="configName">configuration Name for Vasa Client</param>
            <param name="sectionName">Name of section to get</param>
            <returns>List of cached sections or null</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.IVasaFetch">
            <summary>
            Fetching strategy for Vasa
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaFetch.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of config sections.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Config name for this VasaClient</param>
            <param name="sectionName">Section name to get</param>
            <returns>List of sections if available.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.IVasaModule">
            <summary>
            Interface to make configuring the module cleaner.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaModule.AlsoAddClient(System.String,System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow addition of more clients. Use ConfigureClient() instead.
            </summary>
            <param name="configKey">Key in app config to load the path from.</param>
            <param name="configure">Configure action</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaModule.ConfigureClient(System.String,System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow addition of more Vasa clients.  This method will allow re-configuring of an existing client.
            </summary>
            <param name="configKey">Key in app config to load the path from.</param>
            <param name="configure">Configure action</param>
            <returns>Vasa Module</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaModule.ConfigureDefaultClient(System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow configuration of the default client.
            </summary>
            <param name="configure">Configure action.</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaModule.SetDefaultFetchStrategy(System.Func{PrecisionDiscovery.Configuration.Vasa.IVasaFetch})">
            <summary>
            Set the function to use to create the default fetch strategy.
            </summary>
            <param name="defaultFetch">the function to use to create the default fetch strategy.</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.IVasaModule.SetDefaultCacheStrategy(System.Func{PrecisionDiscovery.Configuration.Vasa.IVasaCache})">
            <summary>
            Set the function to use to create the default cache strategy.
            </summary>
            <param name="defaultCache">the function to use to create the default cache strategy.</param>
            <returns>this</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaClient">
            <summary>
            Gateway to Vasa
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaClient.log">
            <summary>
            Logger!
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaClient.usageLog">
            <summary>
            Logger for vasa Usage info.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaClient.VasaClientConfigSectionName">
            <summary>
            Settings for Vasa client go here.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaClient.DefaultConfigName">
            <summary>
            The default config name
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaClient.#ctor">
            <summary>
            Create a Vasa client using default configuration settings.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaClient.#ctor(System.String)">
            <summary>
            Create a Vasa client using URL provided in a specific config setting.
            </summary>
            <param name="configName">Configuration setting to use.  Default is "VasaServerURI"</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaClient.#ctor(System.String,PrecisionDiscovery.Configuration.Vasa.IVasaFetch,PrecisionDiscovery.Configuration.Vasa.IVasaCache)">
            <summary>
            Create a Vasa client using URL provided in a specific config setting.
            </summary>
            <param name="configName">Configuration setting to use.  Default is "VasaServerURI"</param>
            <param name="fetchStrategy">How to fetch the data. If null uses default.</param>
            <param name="cacheStartegy">How to cache the data. If null does not cache.</param>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaClient.FetchStrategy">
            <summary>
            Allow overriding of the fetch. Null means default fetch.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaClient.CacheStrategy">
            <summary>
            Allow overriding of cache. Null means no cache.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaClient.SetDeclaredSections(System.Collections.Generic.HashSet{System.String})">
            <summary>
            List of config sections that the client is expected to provide.
            </summary>
            <param name="declaredSections">The list</param>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaClient.ThrowIfUndeclaredSectionAccessed">
            <summary>
            Throw if an undeclared section is accessed
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaClient.LogSectionUsage">
            <summary>
            If set to true will log all section access once per run.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaClient.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String)">
            <summary>
            Get a list of config sections with the provided name
            </summary>
            <param name="credentials">User credentials.  Can be null for anonymous access.</param>
            <param name="sectionName">Name of the sections to retrieve.</param>
            <returns>List of configuration sections. Or null if none exists.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch">
            <summary>
            Get Vasa sections, but retry several times.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch.log">
            <summary>
            log
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new instance of VasaRetryFetch
            </summary>
            <param name="retryCount">how many times to retry</param>
            <param name="retryDelay">How long to wait between retries.</param>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch.RetryCount">
            <summary>
            How many times to retry
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch.RetryDelay">
            <summary>
            How long to wait between retries in millisecond.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaRetryFetch.GetConfigSections(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of config sections.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Config name for this VasaClient</param>
            <param name="sectionName">Section name to get</param>
            <returns>List of sections if available.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache">
            <summary>
            Simple Vasa cache that expires everything in one go, and does NOT take user credentials into account.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache.log">
            <summary>
            Log
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache.#ctor(System.Int32)">
            <summary>
            Create a new simple cache.
            </summary>
            <param name="cacheDuration">Cache duration in seconds.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache.#ctor(System.TimeSpan)">
            <summary>
            Create a new simle cache
            </summary>
            <param name="cacheDuration">Cache duration</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache.AddConfigSectionsToCache(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String,System.Collections.Generic.List{PrecisionDiscovery.Configuration.Vasa.ConfigSection})">
            <summary>
            Add a list of sections to cache.
            </summary>
            <param name="credentials">User credentials</param>
            <param name="configName">Configuration Name for Vasa client.</param>
            <param name="sectionName">Section being added.</param>
            <param name="sections">List of sections to Add.  Should allow null or empty list.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaSimpleCache.GetConfigSectionsFromCache(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.String)">
            <summary>
            Get a list of sections from the cache
            </summary>
            <param name="credentials">User Credentials</param>
            <param name="configName">configuration Name for Vasa Client</param>
            <param name="sectionName">Name of section to get</param>
            <returns>List of cached sections or null</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaModule">
            <summary>
            Configure Vasa for use with Ninject
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.DefaultVasaClientBindingName">
            <summary>
            Default Vasa Client is going to be bound to this name.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.DefaultClientVariableName">
            <summary>
            Default Vasa Client is going to be injected to varialbes with this name.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.#ctor">
            <summary>
            Constructor!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.CreateVasaClient(PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig)">
            <summary>
            Creates the vasa client.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.Load">
            <summary>
            Configure the kernel
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.ConfigureDefaultClient(System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow configuration of the default client.
            </summary>
            <param name="configure">Configure action.</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.AlsoAddClient(System.String,System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow addition of more clients.  Use ConfigureClient() instead.
            </summary>
            <param name="configKey">Key in app config to load the path from.</param>
            <param name="configure">Configure action</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.ConfigureClient(System.String,System.Action{PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig})">
            <summary>
            Allow addition of more Vasa clients.  This method will allow re-configuring of an existing client.
            </summary>
            <param name="configKey">Key in app config to load the path from.</param>
            <param name="configure">Configure action</param>
            <returns>Vasa Module</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig">
            <summary>
            Client configuration settings.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.AppConfigKey">
            <summary>
            Key in app.config to load the url from
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.TargetVariableName">
            <summary>
            Variable name to inject this client into.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.BindingName">
            <summary>
            Name of the binding for this client.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.FetchStrategy">
            <summary>
            Fetch strategy default is null
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.CacheStrategy">
            <summary>
            Cache strategy, default is null
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.EnsureSections(System.String[])">
            <summary>
            Add sections that you want to make sure are available here.
            </summary>
            <param name="sections">The sections.</param>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.ThrowIfUndeclaredSectionIsAccessed">
            <summary>
            Throw an exception if an undeclared section is accessed.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Vasa.VasaModule.VasaClientConfig.LogSectionUsage">
            <summary>
            If set to true will log all section access once per run.  Default is true.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.SetDefaultFetchStrategy(System.Func{PrecisionDiscovery.Configuration.Vasa.IVasaFetch})">
            <summary>
            Set the function to use to create the default fetch strategy.
            </summary>
            <param name="defaultFetch">the function to use to create the default fetch strategy.</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.VasaModule.SetDefaultCacheStrategy(System.Func{PrecisionDiscovery.Configuration.Vasa.IVasaCache})">
            <summary>
            Set the function to use to create the default cache strategy.
            </summary>
            <param name="defaultCache">the function to use to create the default cache strategy.</param>
            <returns>this</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Vasa.ExtNinjectModule">
            <summary>
            Extend NinjectConfig for NLog and PDLogger
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Vasa.ExtNinjectModule.ConfigureWithVasa(PrecisionDiscovery.Container.NinjectConfig)">
            <summary>
            Extension method for NinjectConfig to configure Vasa
            </summary>
            <param name="config">the config</param>
            <returns>VasaModule</returns>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Updates.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.UpdateDialogCaption">
            <summary>
              Looks up a localized string similar to Update Available.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.UpdateDialogDownloadCompleteText">
            <summary>
              Looks up a localized string similar to Downloaded complete! Launching installer....
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.UpdateDialogDownloadStartingText">
            <summary>
              Looks up a localized string similar to Starting download....
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Configuration.Updates.Strings.UpdateDialogPrompt">
            <summary>
              Looks up a localized string similar to Would you like to download and install the latest update?.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.Updates.UpdateDialog">
            <summary>
            Update UI for PD Client applications.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Configuration.Updates.UpdateDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Updates.UpdateDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.Updates.UpdateDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Configuration.PDDecodeString">
            <summary>
            Uniform way of encoding data in strings.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Configuration.PDDecodeString.PDDecode(System.String)">
            <summary>
            Decode a string based on embedded tokens.
            </summary>
            <param name="s">Encoded string to be decoded.  (encoding is case sensitive)</param>
            <returns>Decoded string.</returns>
            <remarks> Values currently supported are:
            {MachineName}, 
            </remarks>
        </member>
        <member name="T:PrecisionDiscovery.Container.ExtNinjectModule">
            <summary>
            Configure assembly from config file for use with Ninject
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.ExtNinjectModule.ConfigureWithConfigFile(PrecisionDiscovery.Container.NinjectConfig,System.String)">
            <summary>
            Extension method for NinjectConfig to configure assemblies listed in config file.
            </summary>
            <param name="config">the config</param>
            <param name="configSection">config section to read</param>
        </member>
        <member name="T:PrecisionDiscovery.Container.ConfigurationBucket">
            <summary>
            Implementation of IConfigurationBucket see the interface for more details.
            </summary>
            <seealso cref="T:System.Collections.Generic.Dictionary`2" />
            <seealso cref="T:PrecisionDiscovery.Container.IConfigurationBucket" />
        </member>
        <member name="M:PrecisionDiscovery.Container.ConfigurationBucket.GetValue``1(System.String)">
            <summary>
            Gets a value by name, will throw if it doesn't exist.
            Name IS case sensitive
            </summary>
            <typeparam name="T">Type to convert it to</typeparam>
            <param name="name">The name.</param>
            <returns>
            The value or will throw.
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.EFConfig`2">
            <summary>
            Base configuration for EF models.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.MultipleActiveRecordSets">
            <summary>
            Gets or sets a value indicating whether [multiple active record sets].
            </summary>
            <value>
            	<c>true</c> if [multiple active record sets]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.CommandTimeout">
            <summary>
            Gets or sets the command timeout.
            </summary>
            <value>
            The command timeout.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.VasaBindingName">
            <summary>
            Vasa Name of the binding for this client.
            Optional, if not there uses default Vasa.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.VasaSectionName">
            <summary>
            Section name in Vasa that contains EF connection information.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.UserID">
            <summary>
            Gets or sets the user id. Set to NULL to use integrated authentication.
            </summary>
            <value>
            The user id.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFConfig`2.Password">
            <summary>
            Gets or sets the password. Set to NULL to use integrated authentication.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.EFProvider`2">
            <summary>
            Creates EF contexts
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.EFProvider`2.Type">
            <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.EFProvider`2.Create(Ninject.Activation.IContext)">
            <summary>
            Creates the context
            </summary>
            <param name="cx">The cx.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.ExtNinjectModule">
            <summary>
            Extension to NinjectConfig for configuring EF Clients
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.ExtNinjectModule.ConfigureEFClients(PrecisionDiscovery.Container.NinjectConfig)">
            <summary>
            Configures EF clients.
            </summary>
            <param name="config">The config.</param>
            <returns>Interface for futher configuration.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.IEFConfig">
            <summary>
            Configuration interface for EF contexts
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.ModelAssembly">
            <summary>
            Gets or sets the model assembly.
            </summary>
            <value>
            The model assembly.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.ModelName">
            <summary>
            Model name, this is the full namespace path to the edmx file with out the .edmx extension
            </summary>
            <value>
            The name of the model.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.UserID">
            <summary>
            Gets or sets the user ID.  Not required if IntegratedAuthentication is set to true
            </summary>
            <value>
            The user ID.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.Password">
            <summary>
            Gets or sets the password. Not required if IntegratedAuthentication is set to true
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.IntegratedAuthentication">
            <summary>
            If set to true will try to login using windows authentication
            </summary>
            <value>
            The integrated authentication.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.MultipleActiveRecordSets">
            <summary>
            Gets or sets the multiple active record sets.
            </summary>
            <value>
            The multiple active record sets.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.EFConfig.IEFConfig.CommandTimeout">
            <summary>
            Gets or sets the command timeout.
            </summary>
            <value>
            The command timeout.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.ISQLEFModule">
            <summary>
            Interface for configuring EF clients for SQL server
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.ISQLEFModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.ISQLEFModule.Add``4(System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.ISQLEFModule.Add``2(System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject using VASA for EF connection information.
            Mandatory Vasa Values: Server, UserId, Password, InitialCatalog
            Optional Vasa Values(Vasa values used if available otherwise passed in config values used): TrustedConnection, MultipleActiveRecordSets
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.ISQLEFModule.Add``4(System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject using Vasa to configure EF connection information.
            Mandatory Vasa Values: Server, UserId, Password, InitialCatalog
            Optional Vasa Values(Vasa values used if available otherwise passed in config values used): TrustedConnection, MultipleActiveRecordSets
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EFConfig.SQLEFModule">
            <summary>
            Ninject module to configure EF to SQL server.
            Shouldn't be used directly use ConfigureEFClients
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``2(System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject using Vasa for connection information.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``2(System.String,System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject using Vasa for EF connection information.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="modelAssembly">The model assembly.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``4(System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject using Vasa for EF connection information.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``4(System.String,System.String,System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject using Vasa for EF connection information.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="modelAssembly">The model assembly.</param>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``2(System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation for a context to ninject
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="modelAssembly">The model assembly.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``4(System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.EFConfig.SQLEFModule.Add``4(System.String,System.String,System.Action{PrecisionDiscovery.Container.EFConfig.IEFConfig})">
            <summary>
            Add a specific interface and implementation along with it's factory to ninject.
            </summary>
            <typeparam name="TContextInterface">The type of the context interface.</typeparam>
            <typeparam name="TContextImpl">The type of the context impl.</typeparam>
            <typeparam name="TFactoryInterface">The type of the factory interface.</typeparam>
            <typeparam name="TFactoryImpl">The type of the factory impl.</typeparam>
            <param name="modelName">Name of the model.</param>
            <param name="modelAssembly">The model assembly.</param>
            <param name="configure">Action to further configure the context.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EntityFramework.EntityFrameworkModule">
            <summary>
            Ninject Module that contains methods to register entity framwork models
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.EntityFrameworkModule.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.EntityFrameworkModule.AddClient``2(System.String,System.String,System.String)">
            <summary>
            Register an Entity Framework DbContext
            </summary>
            <typeparam name="TModel">The Entity DbContext</typeparam>
            <typeparam name="TInterface">The Interface for the DbContext</typeparam>
            <param name="modelName">The name of the Entity Model, including relative path</param>
            <param name="vasaBindingName">The name of the Vasa Client to use</param>
            <param name="vasaItemName">The name of the Item in Vasa which contains the connection info</param>
        </member>
        <member name="T:PrecisionDiscovery.Container.EntityFramework.ExtNinjectModule">
            <summary>
            Extensions for NinjectModule and NinjectConfig
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.ExtNinjectModule.Entity``2(Ninject.Modules.NinjectModule,System.String,System.String,System.String)">
            <summary>
            Register an Entity Framework DbContext
            </summary>
            <typeparam name="TModel">The Entity DbContext</typeparam>
            <typeparam name="TInterface">The Interface for the DbContext</typeparam>
            <param name="module"></param>
            <param name="modelName">The name of the Entity Model, including relative path</param>
            <param name="vasaBindingName">The name of the Vasa Client to use</param>
            <param name="vasaItemName">The name of the Item in Vasa which contains the connection info</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.ExtNinjectModule.ConfigureEntityFramework(PrecisionDiscovery.Container.NinjectConfig)">
            <summary>
            Extension to configure entity framework clients
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EntityFramework.IEntityConfig">
            <summary>
            Settings for creating a new Dbcontext
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EntityFramework.IEntityConfig.Entity">
            <summary>
            The type of DbContext
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EntityFramework.IEntityConfig.ModelName">
            <summary>
            The name of the Entity Model, including relative path
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EntityFramework.IEntityConfig.VasaBindingName">
            <summary>
            The name of the Vasa Client to use
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.EntityFramework.IEntityConfig.VasaItemName">
            <summary>
            The name of the item in Vasa which contains the connection info
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.EntityFramework.IEntityConfigurator">
            <summary>
            Fluent interface for adding Entity Framework Clients
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.IEntityConfigurator.AddClient``2(System.String,System.String,System.String)">
            <summary>
            Adds a new EntityFramework client
            </summary>
            <typeparam name="TModel">The type of DbContext</typeparam>
            <typeparam name="TInterface">The DbContext Interface</typeparam>
            <param name="modelName">The name of the model (with relative path)</param>
            <param name="vasaBindingName">The name of the vasa client to use</param>
            <param name="vasaItemName">The name of the item in vasa which contains the connection info</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.EntityFramework.IEntityFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.EntityFramework.IEntityFactory.CreateInstance``1(PrecisionDiscovery.Data.IDBConnectionInfo)">
            <summary>
            Creates a new DbContext for the specified Type.
            If there is no passed in connectioninfo, it will attempt to grab the settings from Vasa.
            </summary>
            <typeparam name="T">The type of DbContext to create</typeparam>
            <param name="cinfo">Optionaly connection info</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.IAutoExecute">
            <summary>
            Implement this if you want an action to execute right after container configuration.  Then register it with Ninject
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.IAutoExecute.Title">
            <summary>
            Return something meaningful here
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.IAutoExecute.Execute(Ninject.IKernel)">
            <summary>
            This will get called in NO PARTICULAR ORDER after container is initialized.
            But before application resumes from initializing container.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.IConfigurationBucket">
            <summary>
            Store configuration settings for modules to live between ConfigureNinject call and Load() call of the module
            Will also make it available to different modules.
            Not a good idea to use this in user code, probably best left for shared libraries.
            Main reason this interface exists, is so we can remove it from the Kernel before giving the Kernel back to the application for use.
            </summary>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:PrecisionDiscovery.Container.IConfigurationBucket.GetValue``1(System.String)">
            <summary>
            Gets a value by name, will throw if it doesn't exist.
            Name IS case sensitive
            </summary>
            <typeparam name="T">Type to convert it to</typeparam>
            <param name="name">The name.</param>
            <returns>The value or will throw.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.IMultiProvider`1">
            <summary>
            Use to resolve multiple instances of a type.
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.IMultiProvider`1.GetAll">
            <summary>
            Gets all instances of the type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.IMultiProvider`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.ISingleProvider">
            <summary>
            Use to resolve a single instance
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider.Get``1">
            <summary>
            Gets an instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.ISingleProvider`1">
            <summary>
            Use to resolve a single instance of a type
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.Get">
            <summary>
            Gets an instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.Get(System.String)">
            <summary>
            Gets an instance with the specified binding name
            </summary>
            <param name="bindingName">The binding name</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.TryGet(System.String)">
            <summary>
            Attempts to get an instance with the specified binding name. Returns null if no binding exists
            </summary>
            <param name="bindingName">The binding name</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.GetFor(System.Object)">
            <summary>
            Returns the appropriate instance of an interface for the given token
            </summary>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.TryGetFor(System.Object)">
            <summary>
            Returns the appropriate implementation of an interface for the given token
            </summary>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance if one is found</returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.ISingleProvider`1.NewInstance">
            <summary>
            Gets an instance same as Get().
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.ISingleProvider`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.ISingleProvider`1.GetAs``1">
            <summary>
            Get an instance related to the original type
            </summary>
            <typeparam name="TRelated">The related type</typeparam>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.NinjectLazyListResolver`1">
            <summary>
            Resolve instances of a type when needed.
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyListResolver`1.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.NinjectLazyListResolver`1"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyListResolver`1.GetAll">
            <summary>
            Gets all instances of the type.
            </summary>
            <returns>All instances or empty list</returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectLazyListResolver`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.NinjectLazyResolver`1">
            <summary>
            Resolve instances of a type when needed.
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.NinjectLazyResolver`1"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectLazyResolver`1.NewInstance">
            <summary>
            Gets a new instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.Get">
            <summary>
            Gets a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.Get(System.String)">
            <summary>
            Gets an instance with the specified binding name
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.TryGet(System.String)">
            <summary>
            Attempts to get an instance with the specified binding name. Returns null if no binding exists
            </summary>
            <param name="bindingName">The binding name</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.GetFor(System.Object)">
            <summary>
            Returns the appropriate instance of an interface for the given token
            </summary>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.TryGetFor(System.Object)">
            <summary>
            Returns the appropriate implementation of an interface for the given token
            </summary>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance if one is found</returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectLazyResolver`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectLazyResolver`1.GetAs``1">
            <summary>
            Get an instance related to the original type
            </summary>
            <typeparam name="TRelated">The related type</typeparam>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ExtNinjectModule">
            <summary>
            Extension module for service client configuration
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ExtNinjectModule.ConfigureServiceClient(PrecisionDiscovery.Container.NinjectConfig)">
            <summary>
            Configures a service client with Ninject
            </summary>
            <param name="config">The NinjectConfig</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ExtNinjectModule.ConfigureService(PrecisionDiscovery.Container.NinjectConfig)">
            <summary>
            Configures a service with Ninject
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ExtNinjectModule.ConfigureServiceClient``2(Ninject.IKernel,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject, this method requires you to provide all the parameters.
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="kernel">The kernel to add this binding to.</param>
            <param name="uri">The URI.</param>
            <param name="configure">The configure.</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ExtNinjectModule.ConfigureServiceClient``2(Ninject.IKernel,System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject and configure through Vasa
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="kernel">The Ninject kernel.</param>
            <param name="vasaBindingName">Name of the config to use.</param>
            <param name="vasaSectionName">Name of the vasa section to use</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceConfigModule">
            <summary>
            Config module for services
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceConfigModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceConfig})">
            <summary>
            Manually configure a service
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="endpoint">The endpoint address</param>
            <param name="configure">Configuration</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceConfigModule.Add``2(System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceConfig})">
            <summary>
            Configure a service using Vasa
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Additional configuration</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceConfigModule.AutoStart(System.Boolean)">
            <summary>
            Call this to enable (or disable) auto start of services.
            </summary>
            <param name="autoStart">if set to <c>true</c> wcf services will automatically start.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig">
            <summary>
            Configuration options for a service client
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>
            The size of the max buffer.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxDepth">
            <summary>
            Gets or sets the max depth.
            </summary>
            <value>
            The max depth.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxRecievedMessageSize">
            <summary>
            Gets or sets the size of the max recieved message.
            </summary>
            <value>
            The size of the max recieved message.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.URI">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.UseExceptionMarshalling">
            <summary>
            Determines whether or not to apply Exception Marshalling Behavior to the client
            </summary>
            <value>
            True, to apply this behavior to the client
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.Authenticated">
            <summary>
            Gets or sets The Security Mode
            </summary>
            <value>
            False, to have SecurityMode.None
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxArrayLength">
            <summary>
            Gets or sets the ReaderQuotas.MaxArrayLength
            </summary>
            <value>
            Value for ReaderQuotas.MaxArrayLength
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxBytesPerRead">
            <summary>
            Gets or sets the ReaderQuotas.MaxBytesPerRead
            </summary>
            <value>
            Value for ReaderQuotas.MaxBytesPerRead
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxNameTableCharCount">
            <summary>
            Gets or sets the ReaderQuotas.MaxNameTableCharCount
            </summary>
            <value>
            Value for ReaderQuotas.MaxNameTableCharCount
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxStringContentLength">
            <summary>
            Gets or sets the ReaderQuotas.MaxStringContentLength
            </summary>
            <value>
            Value for ReaderQuotas.MaxStringContentLength
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.MaxItemsInObjectGraph">
            <summary>
            Gets or sets the MaxItemsInObjectGraph for serializer
            </summary>
            <value>
            Value for MaxItemsInObjectGraph
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig.HttpBinding">
            <summary>
            Gets or sets the type of HttpBinding
            </summary>
            <value>
            Basic, for BasicHttpBinding
            Default is wsHttpBinding
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfigModule">
            <summary>
            Interface for configuring service clients in Ninject
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfigModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject, this method requires you to provide all the parameters.
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="uri">The URI.</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfigModule.Add``2(System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject and configure through Vasa
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="vasaBindingName">Name of the config to use.</param>
            <param name="vasaSectionName">Name of the vasa section to use</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig">
            <summary>
            Configuration options for a service
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.Name">
            <summary>
            Gets or sets the name of the service
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.GetAllEndpointAddresses">
            <summary>
            Gets all endpoint addresses configured for the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.AddEndpointAddress(System.String)">
            <summary>
            Adds an endpoint address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.MetaUrl">
            <summary>
            Gets or sets the meta URL.
            </summary>
            <value>
            The meta URL.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.Authenticated">
            <summary>
            Gets or sets whether the service should be authenticated or not
            </summary>
            <value>
            The authenticated.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>
            The size of the max buffer.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.MaxMessageSize">
            <summary>
            Gets or sets the size of the max message size
            </summary>
            <value>
            The size of the max message.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.UseExceptionMarshalling">
            <summary>
            Determines whether or not to apply Exception Marshalling Behavior to the service
            </summary>
            <value>
            True, to apply this behavior to the service
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.IServiceConfig.MaxItemsInObjectGraph">
            <summary>
            Gets or sets the max items in object graph.
            </summary>
            <value>
            The max items in object graph. Default is 65536
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3">
            <summary>
            Configuration options for a service client.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.VasaBindingName">
            <summary>
            Gets or sets the name of the vasa binding.
            </summary>
            <value>
            The name of the vasa binding.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.VasaSectionName">
            <summary>
            Gets or sets the name of the vasa section.
            </summary>
            <value>
            The name of the vasa section.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.InterfaceType">
            <summary>
            Gets the type of the interface.
            </summary>
            <value>
            The type of the interface.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.ImplementationType">
            <summary>
            Gets the type of the implementation.
            </summary>
            <value>
            The type of the implementation.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxRecievedMessageSize">
            <summary>
            Gets or sets the size of the max recieved message.
            </summary>
            <value>
            The size of the max recieved message.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>
            The size of the max buffer.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxDepth">
            <summary>
            Gets or sets the max depth.
            </summary>
            <value>
            The max depth.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxArrayLength">
            <summary>
            Gets or sets the ReaderQuotas.MaxArrayLength
            </summary>
            <value>
            Value for ReaderQuotas.MaxArrayLength
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxBytesPerRead">
            <summary>
            Gets or sets the ReaderQuotas.MaxBytesPerRead
            </summary>
            <value>
            Value for ReaderQuotas.MaxBytesPerRead
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxNameTableCharCount">
            <summary>
            Gets or sets the ReaderQuotas.MaxNameTableCharCount
            </summary>
            <value>
            Value for ReaderQuotas.MaxNameTableCharCount
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxStringContentLength">
            <summary>
            Gets or sets the ReaderQuotas.MaxStringContentLength
            </summary>
            <value>
            Value for ReaderQuotas.MaxStringContentLength
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.MaxItemsInObjectGraph">
            <summary>
            Gets or sets the MaxItemsInObjectGraph for serializer
            </summary>
            <value>
            Value for MaxItemsInObjectGraph
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.URI">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.UseExceptionMarshalling">
            <summary>
            Determines whether or not to apply Exception Marshalling Behavior to the client
            </summary>
            <value>
            True, to apply this behavior to the client
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.Authenticated">
            <summary>
            Gets or sets The Security Mode
            </summary>
            <value>
            False, to have SecurityMode.None
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.HttpBinding">
            <summary>
            Gets or sets the type of HttpBinding
            </summary>
            <value>
            Basic, for BasicHttpBinding
            Default is wsHttpBinding
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig`3.CreateBinding(Ninject.IKernel)">
            <summary>
            Creates the binding.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigModule">
            <summary>
            Ninject module for configuring service clients
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject, this method requires you to provide all the parameters.
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="uri">The URI.</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigModule.Add``2(System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfig})">
            <summary>
            Add a service client to Ninject and configure through Vasa
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="vasaBindingName">Name of the config to use.</param>
            <param name="vasaSectionName">Name of the vasa section to use</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientProvider`3">
            <summary>
            Ninject provider for a service client interface.
            </summary>
            <typeparam name="TServiceInterface">The type of the service interface.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <typeparam name="TReturnInterface">The type of the return interface.</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientProvider`3.#ctor(PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfig{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientProvider`3"/> class.
            </summary>
            <param name="config">The configuration parameters.</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientProvider`3.Create(Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The created instance.
            </returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceClientProvider`3.Type">
            <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigPost">
            <summary>
            Power On Self Test for service configurations.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigPost.#ctor(Ninject.IKernel,System.Collections.Generic.List{PrecisionDiscovery.Container.Serviceconfig.IServiceClientConfigInternal})">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigPost" /> class.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="clientConfigs">The client configs.</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceClientConfigPost.RunTests">
            <summary>
            Override to run your tests in here.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceControl">
            <summary>
            Control point for individual services
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceControl.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.IServiceManager">
            <summary>
            Control point for services hosted
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceManager.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceManager.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.IServiceManager.GetControlPoint(System.Object)">
            <summary>
            Gets the control point for a specific instance, mainly for a service to retrieve it's own control point
            don't call this during constructor of your service.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2">
            <summary>
            Configuration settings for a service
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.CreateServiceHost">
            <summary>
            Creates the service host.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.VasaBindingName">
            <summary>
            Gets or sets the name of the vasa binding.
            </summary>
            <value>
            The name of the vasa binding.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.VasaSectionName">
            <summary>
            Gets or sets the name of the vasa section.
            </summary>
            <value>
            The name of the vasa section.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.ContractType">
            <summary>
            Gets or sets the type of the contract.
            </summary>
            <value>
            The type of the contract.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.ImplementationType">
            <summary>
            Gets or sets the type of the implementation.
            </summary>
            <value>
            The type of the implementation.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.Name">
            <summary>
            Gets or sets the name of the service
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.MetaUrl">
            <summary>
            Gets or sets the meta URL.
            </summary>
            <value>
            The meta URL.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.Authenticated">
            <summary>
            Gets or sets whether the service should be authenticated or not
            </summary>
            <value>
            The authenticated.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>
            The size of the max buffer.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.MaxMessageSize">
            <summary>
            Gets or sets the size of the max message size
            </summary>
            <value>
            The size of the max message.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.UseExceptionMarshalling">
            <summary>
            Determines whether or not to apply Exception Marshalling Behavior to the service
            </summary>
            <value>
            True, to apply this behavior to the service
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.MaxItemsInObjectGraph">
            <summary>
            Gets or sets the max items in object graph.
            </summary>
            <value>
            The max items in object graph. Default is 65536
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.GetAllEndpointAddresses">
            <summary>
            Gets all endpoint addresses configured for the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigurator`2.AddEndpointAddress(System.String)">
            <summary>
            Adds an endpoint address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule">
            <summary>
            Config module for services 
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.AutoStart(System.Boolean)">
            <summary>
            Call this to enable (or disable) auto start of services.
            </summary>
            <param name="autoStart">if set to <c>true</c> wcf services will automatically start.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.Add``2(System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceConfig})">
            <summary>
            Manually configure a service
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="endpoint">The endpoint address</param>
            <param name="configure">Configuration</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.Add``2(System.String,System.String,System.Action{PrecisionDiscovery.Container.Serviceconfig.IServiceConfig})">
            <summary>
            Configure a service using Vasa
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TServiceImplementation">The type of the service implementation.</typeparam>
            <param name="vasaBindingName">Name of the vasa binding.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <param name="configure">Additional configuration</param>
            <returns></returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.Title">
            <summary>
            Return something meaningful here
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigModule.Execute(Ninject.IKernel)">
            <summary>
            This will get called in NO PARTICULAR ORDER after container is initialized.
            But before application resumes from initializing container.
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigPost">
            <summary>
            Power on self test for services
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.ServiceConfigPost.RunTests">
            <summary>
            Override to run your tests in here.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.Serviceconfig.PDServiceManager">
            <summary>
            Controls loading of WCF services
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.PDServiceManager.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.PDServiceManager.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.PDServiceManager.GetControlPoint(System.Object)">
            <summary>
            Gets the control point for a specific instance, mainly for a service to retrieve it's own control point
            don't call this during constructor of your service.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.Serviceconfig.PDServiceManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.Testing.TestNinjectModule">
            <summary>
            Fakes a ninject module and allows you to specify the load action.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.Testing.TestNinjectModule.LoadAction">
            <summary>
            Gets or sets the load action.
            </summary>
            <value>
            The load action.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Container.Testing.TestNinjectModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.Testing.TestNinjectModule"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.Testing.TestNinjectModule.#ctor(System.Action{PrecisionDiscovery.Container.Testing.TestNinjectModule})">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Container.Testing.TestNinjectModule"/> class.
            </summary>
            <param name="loadAction">The load action.</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.Testing.TestNinjectModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Container.ToSingletonSyntax`1">
            <summary>
            Used to deal with the problem with ninject where it doesn't properly resolve Singletons that are resolved via different interfaces
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Container.ToSingletonSyntax`1.To``1">
            <summary>
            Make specified type a singleton and bind the interface to it.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.NinjectConfig">
            <summary>
            Help configure an instance of Ninject Kernel
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectConfig.DisablePowerOnSelfTest">
            <summary>
            Gets or sets a value indicating whether to [disable power on self test].
            </summary>
            <value>
            	<c>true</c> to disable self test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectConfig.HaltOnOrAbove">
            <summary>
            What error level to halt the application at.
            </summary>
            <value>
            The error level that will stop the app from executing
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectConfig.DisableAutoExec">
            <summary>
            Gets or sets a value indicating whether to [disable auto exec].
            </summary>
            <value>
              <c>true</c> to [disable auto exec]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectConfig.RegisterLazyProviders">
            <summary>
            Gets or sets a value indicating whether to register NinjectLazyListResolver and NinjectLazyResolver with IMultiProvider and ISingleProvider.
            Default/Recommended value is true.
            If this is set, you can use IMultiProvider and ISingleProvider with any type.
            SingleProvider will call Get() on Kernel so there should be only one instance registered or it will throw.
            </summary>
            <value>
            	<c>true</c> if [register lazy providers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectConfig.NinjectSettings">
            <summary>
            Standard Ninject settings.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectConfig.AddModule(Ninject.Modules.NinjectModule)">
            <summary>
            Add a module to be loaded into Kernel
            </summary>
            <param name="mod">Module to be loaded</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectConfig.ContainsBucket(System.String)">
            <summary>
            Checks to see if bucket list for config contains specific bucket name
            </summary>
            <remarks>
            Used primarily to test
            </remarks>
            <param name="module">The module name, case sensitive</param>
            <returns>Whether or not buckets contain the specified bucket.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectConfig.GetBucketFor(System.String)">
            <summary>
            Gets the bucket for the module, use a unique case sensitive name here that is well known for this module.
            This will allow other modules to get this modules config bucket.
            If the config bucket doesn't exists it will be created.
            </summary>
            <remarks>
            You can use this to store values that will be available during the OnLoad of all modules for sharing data between various modules without creating dependencies.
            It's better to stick with simple types.  Other modules need to know the string name you are giving the config bucket and the name of the various items in there.
            It is best not to expose this to the user.
            For a usage example take a look at the MassTransit Module.
            </remarks>
            <param name="module">The module name, case sensitive</param>
            <returns>Config bucket for the module</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectConfig.ConfigureWith``1">
            <summary>
            Generic implementation of the config API
            Creates an instance of the module and returns it for further configuration.
            </summary>
            <typeparam name="T">Type to configure with.</typeparam>
            <returns>Instance of the type.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectConfig.ConfigureWith(System.String)">
            <summary>
            Add additional files to be loaded.
            </summary>
            <param name="fileNamePattern">The file name pattern. Can be a whole file path or search parameter like "*.dll"</param>
        </member>
        <member name="T:PrecisionDiscovery.Container.NinjectExtensions">
            <summary>
            Extensions to make using Ninject easier and more uniform.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.ConfigureNinject(System.Action{PrecisionDiscovery.Container.NinjectConfig})">
            <summary>
            Configure a standard Ninject kernel with defaults.
            By default it will configure the following:
            NinjectSettings.InjectAttribute = typeof(PDInjectAttribute);
            NinjectSettings.InjectNonPublic = true;
            NinjectSettings.InjectParentPrivateProperties = true;
            </summary>
            <param name="configAction">Action to override the settings.</param>
            <returns>Configured IKernel which MUST be disposed.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.SafeLoad``1(Ninject.IKernel)">
            <summary>
            Load a module but first check to make sure it is not a duplicate.
            You won't know if your request was honored or not, so you shouldn't care.
            Won't check for derived types, so don't get too fancy with it.
            </summary>
            <typeparam name="T">Type of the module to load.</typeparam>
            <param name="kernel">The kernel.</param>
            <returns>The Kernel for chaining.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Container.NinjectExtensions.Kernel">
            <summary>
            This is valid ONLY after ConfigureNinject has been called successfully.
            Generally it's bad form to use global static kernel, but it comes in handy in libraries.
            Try not to use it.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.AsSingleton``1(Ninject.Syntax.IBindingToSyntax{``0})">
            <summary>
            To make binding to a singlton workable, see ToSingletonSyntax for more details."/>
            </summary>
            <typeparam name="T">Type to bind</typeparam>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.For``1(Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0},System.Object)">
            <summary>
            Allows for conditional binding based on passed in token
            </summary>
            <param name="binding">The binding.</param>
            <param name="token">An object or value used to indicate which type to instantiate</param>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.GetFor``1(Ninject.IKernel,System.Object)">
            <summary>
            Returns the appropriate instance of an interface for the given token
            </summary>
            <typeparam name="T">Type to bind</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.GetAllFor``1(Ninject.IKernel,System.Object)">
            <summary>
            Returns the appropriate list of instances of an interface for the given token
            </summary>
            <typeparam name="T">Type to bind</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired list of instances</returns>
        </member>
        <member name="M:PrecisionDiscovery.Container.NinjectExtensions.TryGetFor``1(Ninject.IKernel,System.Object)">
            <summary>
            Instantiates the appropriate implementation of an interface for the given token
            </summary>
            <typeparam name="T">Type to bind</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="token">An object or value used to indicate which type to instantiate</param>
            <returns>The desired instance if one is found</returns>
        </member>
        <member name="T:PrecisionDiscovery.Container.PDInjectAttribute">
            <summary>
            Hint for Container to inject dependency here.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.StoragePathType">
             <summary>
             Storage path types.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathType.Discovery">
            <summary>
            Discovery storage path
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathType.Forensic">
            <summary>
            Forensic storage path
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathType.Hosting">
            <summary>
            Hosting storage path
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathType.Processing">
            <summary>
            Processing storage path
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.MatterSOW">
             <summary>
             Matter SOW
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.MatterSOW.Received">
            <summary>
            The SOW has been received for the matter so work can commence.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.MatterSOW.ManagementOverride">
            <summary>
            The matter does not have a signed SOW and requires management override before work commences.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.StoragePathState">
             <summary>
             Storage path states for matter.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathState.None">
            <summary>
            The storage path has not been set.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathState.Valid">
            <summary>
            The storage path points to a valid CIFs share.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.StoragePathState.Invalid">
            <summary>
            The storage path points to an invalid CIFs share.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Custodian.CustodianType">
             <summary>
             Possible custodian types.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianType.Workflow">
            <summary>
            Custodian was created in workflow
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianType.Relativity">
            <summary>
            Custodian was imported from relativity
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianType.iConect">
            <summary>
            Custodian was imported from iConect
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianType.eCapture">
            <summary>
            Custodian was imported from eCapture
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianType.CSV">
            <summary>
            Custodian was imported from CSV
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Custodian.CustodianStatus">
             <summary>
             Possible custodian status types.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianStatus.Process">
            <summary>
            Custodian will be processed
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianStatus.DoNotProcess">
            <summary>
            Custodian will not be processed
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Custodian.CustodianStatus.Hold">
            <summary>
            Custodian is on hold
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.MatterStatus">
             <summary>
             Possible matter statuses.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.MatterStatus.PendingApproval">
            <summary>
            Matter's require an SOW before work commences.  Management can override this requirement.
            An interim/transition state when a matter lacks a signed SOW and requires management approval.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.MatterStatus.Active">
            <summary>
            Active - current and on-going processing and/or hosting work for Matter.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.UniqueObject">
            <summary>
            A unique object.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.UniqueObject._uniqueID">
            <summary>
            For serialization don't use.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.DataTypes.UniqueObject"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:PrecisionDiscovery.DataTypes.UniqueObject.UniqueID">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(PrecisionDiscovery.DataTypes.UniqueObject,PrecisionDiscovery.DataTypes.UniqueObject)">
            <summary>
            Determines whether two instances of UniqueObject are equal.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if they are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.GetHashCode(PrecisionDiscovery.DataTypes.UniqueObject)">
            <summary>
            Returns a hash code for a given instance of UniqueObject.
            </summary>
            <param name="obj">The object</param>
            <returns>
            A hash code for provided instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(PrecisionDiscovery.DataTypes.IUniqueObject,PrecisionDiscovery.DataTypes.IUniqueObject)">
            <summary>
            Determines whether two instances of IUniqueObject are equal.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if they are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.GetHashCode(PrecisionDiscovery.DataTypes.IUniqueObject)">
            <summary>
            Returns a hash code for a given instance of IUniqueObject.
            </summary>
            <param name="obj">The object</param>
            <returns>
            A hash code for provided instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(PrecisionDiscovery.DataTypes.IUniqueObject)">
            <summary>
            Determines whether the specified IUniqueObject is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Determines whether the specified SecurityIdentifier is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.Equals(PrecisionDiscovery.DataTypes.UniqueObject)">
            <summary>
            Check to see if another UniqueObject equals this one.
            </summary>
            <param name="other">The other.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.op_Equality(PrecisionDiscovery.DataTypes.UniqueObject,PrecisionDiscovery.DataTypes.UniqueObject)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.UniqueObject.op_Inequality(PrecisionDiscovery.DataTypes.UniqueObject,PrecisionDiscovery.DataTypes.UniqueObject)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.IUniqueObject">
            <summary>
            Interface for a Unique Object.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.DataTypes.IUniqueObject.UniqueID">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.AccessControl.Actions.EditMatterStatus">
            <summary>
            Ability to change matter status.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.AccessControl.Actions.ManageCaseSetup">
            <summary>
            Ability to re-run case setup or change case storage paths.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Delivery.DeliverySourceTypes">
             <summary>
             Possible delivery source types.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliverySourceTypes.OM">
            <summary>
             
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliverySourceTypes.HD">
            <summary>
             
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliverySourceTypes.FTP">
            <summary>
            
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliverySourceTypes.Email">
            <summary>
            
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Delivery.DeliveryAction">
             <summary>
             Possible delivery actions.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryAction.AutoCopy">
            <summary>
            Workflow is responsbile for copying the delivery to the filestore.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryAction.ManualCopy">
            <summary>
            The delivery was copied manually.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Delivery.DeliveryState">
             <summary>
             Possible delivery states.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryState.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryState.Inventory">
            <summary>
            Inventory
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryState.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryState.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Delivery.DeliveryState.Unravel">
            <summary>
            Unravel
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryStatus">
             <summary>
             Possible discovery status types.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryStatus.Process">
            <summary>
             The item can be approved for processing.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryStatus.DoNotProcess">
            <summary>
             The item will not be processed.
            </summary>        
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryStatus.Hold">
            <summary>
            The item will be placed on hold.
            </summary>        
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryType">
             <summary>
             Possible discovery types
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryType.EDoc">
            <summary>
            Electronic Document
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.DiscoveryType.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus">
            <summary>
            Posibble progress status
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.Success">
            <summary>
            Successfull completion of stage
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.InProgress">
            <summary>
            Stage is in progress
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.CancelInProgress">
            <summary>
            Cancel is in progress
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.Canceled">
            <summary>
            Operation canceled
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.PauseInProgress">
            <summary>
            Operation Paused
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.Paused">
            <summary>
            Operation Paused
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.EDiscovery.ProgressStatus.Failure">
            <summary>
            Stage completion failed
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.EnumHelper">
            <summary>
            Provides a static utility object of methods and properties to interact with enumerated types. 
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Gets the description associationed with the enum value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.DataTypes.EnumHelper.ToList(System.Type)">
            <summary>
            Returns a list of enum values paired with their descriptions.
            This is helpful for binding to UI controls.
            Example:
            ComboBox combo = new ComboBox();   
            combo.DataSource = EnumHelper.ToList(typeof(SimpleEnum));   
            combo.DisplayMember = "Value";   
            combo.ValueMember = "Key";
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.Hosting.HostingPlatform">
            <summary>
            Possible Hosting Platforms for a matter.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.Hosting.HostingPlatform.Relativity">
            <summary>
            Relativity platform
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.DataTypes.FileSystem.FileState">
             <summary>
             Possible file states.
            
             </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.FileSystem.FileState.Inventory">
            <summary>
            Inventory
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.FileSystem.FileState.Copy">
            <summary>
            Copy 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.FileSystem.FileState.Unravel">
            <summary>
            Unravelling 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.DataTypes.FileSystem.FileState.Delete">
            <summary>
            Delete state
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Data.EntityFramework.EFRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="createDbIfNotExists"></param>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="nameOrConnectionString"></param>
            <param name="createDbIfNotExists"></param>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.All``1(System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Create``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="TObject"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Delete``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="TObject"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Update``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="TObject"></param>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Filter``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.EntityFramework.EFRepository.Filter``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,System.Int32,System.Int32,System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <param name="total"></param>
            <param name="index"></param>
            <param name="size"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Data.EntityFramework.TimeStamped">
            <summary>
            
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.EntityFramework.TimeStamped.CreationDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.EntityFramework.TimeStamped.LastModified">
            <summary>
            
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Data.Validation.IModelValidator">
            <summary>
            Interface for validating data classes.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.IModelValidator.ValidateObject(System.Object)">
            <summary>
            Validates the passed object, returns a list of any error results.  
            Returns empty list if no validation errors found.
            </summary>
            <param name="obj">Object to validate</param>
            <returns>List of any validation errors, empty list if no  errors occured</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.IModelValidator.ValidateObjectProperty(System.Object,System.String)">
            <summary>
            Validates the specified property of the passed in object, returns a list of any error results.  
            Returns empty list if no validation errors found.
            </summary>
            <param name="obj">Object with property to validate</param>
            <param name="propertyName">Property name of object property to validate</param>
            <returns>List of any validation errors, empty list if no  errors occured</returns>
        </member>
        <member name="T:PrecisionDiscovery.Data.Validation.PDModelValidator">
            <summary>
            Class for validating data classes based on their DataAnnotation attributes.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.Validation.PDModelValidator.log">
            <summary>
            Logger!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.PDModelValidator.ValidateObject(System.Object)">
            <summary>
            Validates the passed object, returns a list of any error results.  
            Returns empty list if no validation errors found.
            </summary>
            <param name="obj">Object to validate</param>
            <returns>List of any validation errors, empty list if no  errors occured</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.PDModelValidator.ValidateObjectProperty(System.Object,System.String)">
            <summary>
            Validates the specified property of the passed in object, returns a list of any error results.  
            Returns empty list if no validation errors found.
            </summary>
            <param name="obj">Object with property to validate</param>
            <param name="propertyName">Property name of object property to validate</param>
            <returns>List of any validation errors, empty list if no  errors occured</returns>
        </member>
        <member name="T:PrecisionDiscovery.Data.Validation.RequiredIfAttribute">
             <summary>
             Attribute for required properties based on the value of another property.
             
             For Mvc client side validation make sure to register in the Global.asax like:  
                  DataAnnotationsModelValidatorProvider.RegisterAdapter(typeof(RequiredIfAttribute), typeof(RequiredAttributeAdapter));
             
             Usage:
                 [RequiredIf("CustodianType", CustodianType.Person, ErrorMessage = "For custodians of type person, {0} is required")]
                 public string LastName { get; set; }
            
             </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.RequiredIfAttribute.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">Property name of conditionally property to check value against</param>
            <param name="desiredvalue">Value to check against conditional property</param>
        </member>
        <member name="M:PrecisionDiscovery.Data.Validation.RequiredIfAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Override to perform conditional check based on the property value
            </summary>
            <param name="value">property value to check</param>
            <param name="context">Validation context</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:PrecisionDiscovery.Data.DBConnectionInfo">
            <summary>
            Class to store connection information for a database
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.Name">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.Server">
            <summary>
            Address of the server
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.Database">
            <summary>
            Database to connect to
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.UserID">
            <summary>
            UserID to user, if not using integrated authentication
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.Password">
            <summary>
            Password to user if not using integrated authentication
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.IntegratedAuthentication">
            <summary>
            Use integrated Authentication
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.MultipleActiveRecordSets">
            <summary>
            Allow multiple active recordsets.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.CommandTimeout">
            <summary>
            Command  timeout
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.DBConnectionInfo.Provider">
            <summary>
            Gets the database provider type
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.DBConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Data.DBConnectionInfo"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.DBConnectionInfo.#ctor(PrecisionDiscovery.Data.IDBConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Data.DBConnectionInfo"/> class.
            Copying values from another one.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.NameTag">
            <summary>
            Vasa tag for name filed
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.ServerTag">
            <summary>
            Vasa tag for Server filed
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.DatabaseTag">
            <summary>
            Vasa tag for database field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.UserIDTag">
            <summary>
            Vasa tag for UserID field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.PasswordTag">
            <summary>
            Vasa tag for Password field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.MultipleActiveRecordSetsTag">
            <summary>
            Vasa tag for MultipleActiveRecordSets field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.IntegratedAuthenticationTag">
            <summary>
            Vasa tag for IntegratedAuthentication field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.CommandTimeoutTag">
            <summary>
            Vasa tag for CommandTimeout field
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Data.DBConnectionInfo.ProviderTag">
            <summary>
            Vasa Tag for Provider field
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Data.DBConnectionInfoExtensions">
            <summary>
            Useful extensions for DBConnectionInfo
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.DBConnectionInfoExtensions.GetAsDBConnectionInfo(PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Converts a config section to a IDBConnectionInfo
            </summary>
            <param name="section">The section.</param>
            <returns>Non verified DBConnectionInfo</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.DBConnectionInfoExtensions.IsValid(PrecisionDiscovery.Data.IDBConnectionInfo)">
            <summary>
            Determines whether the specified connection info is valid.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <returns>
              <c>true</c> if the specified connection info is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.DBConnectionInfoExtensions.DetailString(PrecisionDiscovery.Data.IDBConnectionInfo,System.String)">
            <summary>
            Create a string that contains all the information for debugging.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Data.Exceptions.RepositoryException">
            <summary>
            Generic class for persistant storage exceptions.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message to be stored and passed up with the exception</param>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message to be stored and passed up with the exception</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryException.#ctor(System.Data.DataException)">
            <summary>
            Constructor
            </summary>
            <param name="ex">DataException that is wrapped in this class</param>
        </member>
        <member name="T:PrecisionDiscovery.Data.Exceptions.RepositoryValidationException">
            <summary>
            Generic exception class for persitant storage validation exceptions. 
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.Exceptions.RepositoryValidationException.ValidationErrors">
            <summary>
            Gets a list of validation errors related to the exception.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message to be stored and passed up with the exception</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryValidationException.#ctor(System.Data.Entity.Validation.DbEntityValidationException)">
            <summary>
            Constructor
            </summary>
            <param name="validationException">EF specific validation error to be wrapped</param>     
        </member>
        <member name="T:PrecisionDiscovery.Data.Exceptions.RepositoryValidationError">
            <summary>
            Carry information about a specific persistent storage validation error.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.Exceptions.RepositoryValidationError.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">Property the validation error occured on.</param>
            <param name="errorMessage">Error details</param>
        </member>
        <member name="P:PrecisionDiscovery.Data.Exceptions.RepositoryValidationError.PropertName">
            <summary>
            Property the validation error occured on.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.Exceptions.RepositoryValidationError.ErrorMessage">
            <summary>
            Error message associated with the property
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Data.IDBConnectionInfo">
            <summary>
            Standard database connection info to make life a bit easier
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.Name">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.Server">
            <summary>
            Server the database is located at
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.UserID">
            <summary>
            Gets the user ID.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.IntegratedAuthentication">
            <summary>
            Gets a value indicating whether current user credentials should be used (windows integrated).
            </summary>
            <value>
              <c>true</c> if [trusted connection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.MultipleActiveRecordSets">
            <summary>
            Gets a value indicating whether multiple active recordsets should be allowed.
            Default is false.
            </summary>
            <value>
            	<c>true</c> if [multiple active record sets]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.CommandTimeout">
            <summary>
            Gets the command timeout. If not provided default is used.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Data.IDBConnectionInfo.Provider">
            <summary>
            Gets the database provider type
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Data.SQLServer.ConnectionStringBuilder">
            <summary>
            Static calls for SQL server database connection strings.
            Supports standard and EF connections.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Data.SQLServer.ConnectionStringBuilder.GetConnnectionString(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a SQL server connection string.
            </summary>
            <param name="dataSource">Data Source</param>
            <param name="userId">User Id to login (non-trused auth)</param>
            <param name="password">Password to login (non-trusted auth)</param>
            <param name="initialCatalog">Database to connect to</param>
            <param name="trustedConnection">True for trusted, false (default) for SQL authentication</param>
            <param name="multipleActiveRecordSets">True for multiple active recordsets on a connection, false (default) one active recordset</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.SQLServer.ConnectionStringBuilder.GetConnnectionString(PrecisionDiscovery.Data.IDBConnectionInfo)">
            <summary>
            Returns a SQL server connection string.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <returns>Connection string</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.SQLServer.ConnectionStringBuilder.GetEntityConnectionString(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a SQL server connection string.
            </summary>
            <param name="dataSource">Data Source</param>
            <param name="userId">User Id to login (non-trused auth)</param>
            <param name="password">Password to login (non-trusted auth)</param>
            <param name="initialCatalog">Database to connect to</param>
            <param name="modelName">EF model name</param>
            <param name="modelAssembly">The model assembly default is * (current assembly), or path to where the model is</param>
            <param name="trustedConnection">True for trusted, false (default) for SQL authentication</param>
            <param name="multipleActiveRecordSets">True for multiple active recordsets on a connection, false (default) one active recordset</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:PrecisionDiscovery.Data.SQLServer.ConnectionStringBuilder.GetEntityConnectionString(PrecisionDiscovery.Data.IDBConnectionInfo,System.String,System.String)">
            <summary>
            Gets an entity connection string.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="modelName">EF model name</param>
            <param name="modelAssembly">The model assembly default is * (current assembly), or path to where the model is</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.IPDLogger">
            <summary>
            Logging interface, based on serilog interface.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.IsEnabled(PrecisionDiscovery.Diagnostics.Logging.LogLevel)">
            <summary>
            Determine if events at the specified level will be passed through to the log sinks.
            </summary>
            <param name="level"> Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Write(PrecisionDiscovery.Diagnostics.Logging.LogLevel,System.String,System.Object[])">
            <summary>
             Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValues">The property values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Write(PrecisionDiscovery.Diagnostics.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
             Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenVerboseIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When verbose is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Verbose(System.Exception)">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenTraceIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When trace is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Trace(System.String,System.Object[])">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Trace(System.Exception)">
            <summary>
            Write a log event with the Verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenDebugIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When debug is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the Debug level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Debug(System.Exception)">
            <summary>
            Write a log event with the Debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Information(System.Exception)">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenInfoIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When info is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Info(System.String,System.Object[])">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Info(System.Exception)">
            <summary>
            Write a log event with the Information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warning(System.Exception)">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenWarnIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When warn is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warn(System.String,System.Object[])">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Warn(System.Exception)">
            <summary>
            Write a log event with the Warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenErrorIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When Error is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the Error level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Error(System.Exception)">
            <summary>
            Write a log event with the Error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.WhenFatalIsEnabled``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            When fatal is enabled, do this for all values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="doThisForEachValue">The do this.</param>
            <param name="header">Header to log before the loop</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the Fatal level and associated exception.
            </summary>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the Fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate"> Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.IPDLogger.Fatal(System.Exception)">
            <summary>
            Write a log event with the Fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.LoggerType">
            <summary>
            Logger types supported
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LoggerType.Unknown">
            <summary>
            Not a valid logger
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LoggerType.RollingFile">
            <summary>
            The rolling file logger
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LoggerType.Seq">
            <summary>
            Seq Server
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LoggerType.TestLogger">
            <summary>
            Not a valid logger, used for unit tests etc.
            Will not acutally create a logger.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.LogLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            Copied from Serilog
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Verbose">
            <summary>
            Anything and everything you might want to know about a running block of code.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Debug">
            <summary>
            Internal system events that aren't necessarily observable from the outside.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things happen.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken or data is lost.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.LogLevel.Fatal">
            <summary>
            If you have a pager, it goes off when one of these occurs.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig">
            <summary>
            Logger configurations
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig.OfType(PrecisionDiscovery.Diagnostics.Logging.LoggerType)">
            <summary>
            Type of logger you are configuring.  This is mandatory
            </summary>
            <param name="loggerType">Type of the logger.</param>
            <returns>PDLogLoggerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig.WithParameter(System.String,System.String)">
            <summary>
            Add logger specific parameters
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns>PDLogLoggerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig.RemoveParameter(System.String)">
            <summary>
            Removes a prviously set parameter
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>PDLogLoggerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig.RemoveGlobalParameter(System.String)">
            <summary>
            Removes a previously set parameter only for this logger
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>PDLogLoggerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig.SetMinimumLevel(PrecisionDiscovery.Diagnostics.Logging.LogLevel)">
            <summary>
            Sets the minimum level for this particular logger.  Shoudn't be lower than global.
            </summary>
            <param name="level">The level.</param>
            <returns>PDLogLoggerConfig</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig">
            <summary>
            LogManager configurations
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.AddDefaultParameter(System.String,System.String,System.Boolean)">
            <summary>
            Adds a default paramter to be added to all loggers.
            </summary>
            <param name="parametername">The parametername.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="allowOverride">if set to <c>true</c> if the value already exists it will be overwritten..</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.RemoveDefaultParameter(System.String)">
            <summary>
            Removes a default parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.SetApplicationInfo(System.Type)">
            <summary>
            Sets the application information.
            </summary>
            <param name="useThisTypesAssembly">If provided use the Assembly that implements this type to set name and version of the app.
            If not usese the calling assembly.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.SetAppName(System.String)">
            <summary>
            Sets the name of the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.SetAppVersion(System.Version)">
            <summary>
            Sets the application version.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.UseConfigFileForConfiguration">
            <summary>
            Uses app.config or web.config to configure logger
            </summary>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.DonNotUseConfigFileForConfiguration">
            <summary>
            Do not use app.config or web.config to configure logger.
            </summary>
            <returns>
            PDLogManagerConfig
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.UseVasaForConfiguration">
            <summary>
            Uses default vasa for configuration
            </summary>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.UseVasaForConfiguration(System.String,System.String)">
            <summary>
            Uses the vasa for configuration.
            </summary>
            <param name="vasaConfigName">Name of the vasa configuration.</param>
            <param name="vasaSectionName">Name of the vasa section.</param>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.DoNotUseVasaForConfiguration">
            <summary>
            Don't use Vasa for logger configuration.
            </summary>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.ConfigureLogger(System.String,PrecisionDiscovery.Diagnostics.Logging.LoggerType,System.Action{PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig})">
            <summary>
            Configures a logger
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <param name="loggerType">Type of the logger.</param>
            <param name="loggerConfigAction">The logger configuration action.</param>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.ConfigureLogger(System.String,System.Action{PrecisionDiscovery.Diagnostics.Logging.PDLogLoggerConfig})">
            <summary>
            Configures a logger.  Make sure to specify a type if this is a new logger.
            using the version with logger type is recommended.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <param name="loggerConfigAction">The logger configuration action.</param>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig.SetMinimumLevel(PrecisionDiscovery.Diagnostics.Logging.LogLevel)">
            <summary>
            Sets the minimum level for all loggers
            </summary>
            <param name="level">The level.</param>
            <returns>PDLogManagerConfig</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.PDLoggerSerilog">
            <summary>
            NLog Class wrapper for PD context specific debugging.
            Supports all the NLog Logger calls with an additional override for each,
            that takes and logs a PDContext object.
            
            Call PDLogManager to create PDLogger instances.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Logging.PDLogManager">
            <summary>
            Creates and manages instances of PDLogger objects.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.DefaultRollingFileLogger">
            <summary>
            The default rolling file logger
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.Logger">
            <summary>
            Default application logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.ForType``1">
            <summary>
            Gets the logger named after the specified Type
            </summary>
            <typeparam name="TSource">The type.</typeparam>
            <returns>New Logger configured for the type</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.ForType(System.Type)">
            <summary>
            Gets the logger named after the specified Type
            </summary>
            <param name="source">The type.</param>
            <returns>New Logger configured for the type</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.ForContext(System.String,System.Object)">
            <summary>
            Create a logger with specified property preset
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set the property to.</param>
            <returns>New Logger configured with the specified property.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.ForContext(PrecisionDiscovery.Diagnostics.Logging.IPDLogger,System.String,System.Object)">
            <summary>
            Create a logger with specified property preset, preserving the values from an existing logger.
            </summary>
            <param name="logger">The source loger</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set the property to.</param>
            <returns>
            New Logger configured with the specified property.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.#cctor">
            <summary>
            Make sure we initialize with something.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.Configure(System.Action{PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig})">
            <summary>
            Configure logging.
            </summary>
            <param name="configAction">The configuration action.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.CreateInitialConfig">
            <summary>
            Basic configuration setup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Logging.PDLogManager.ReconfigureLogger(PrecisionDiscovery.Diagnostics.Logging.PDLogManagerConfig)">
            <summary>
            Reconfigures the logger using the provided PDLogManagerConfig
            Calling this will cause all loggers that are created from this point on to use the new configuration.
            </summary>
            <param name="config">The configuration object to use.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.IObjectDeconstructor">
            <summary>
            Deconstructs and object into key value pairs.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IObjectDeconstructor.Deconstruct(System.Object[])">
            <summary>
            Deconstructs the specified objects.
            </summary>
            <param name="objects">The objects to deconstruct</param>
            <returns>
            Key value pairs generated from the objects.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IObjectDeconstructor.DeconstructInto(System.Collections.Generic.IDictionary{System.String,System.String},System.Object[])">
            <summary>
            Deconstructs the specified set of objects into a target dictionary
            </summary>
            <param name="target">The target dictionary</param>
            <param name="objects">The objects to deconstruct</param>
            <returns>Number of key\value pairs added to the dictionary.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IObjectDeconstructor.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compares two objects property by property and returns the difference in a dictionary
            </summary>
            <param name="before">The before object.</param>
            <param name="after">The after object.</param>
            <param name="prefix">Prefix for the key names</param>
            <returns>The difference</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IObjectDeconstructor.CompareInto(System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Object,System.String)">
            <summary>
            Compares two objects property by property and adds them to provided dictionary
            </summary>
            <param name="target">The target.</param>
            <param name="before">The before object.</param>
            <param name="after">The after object.</param>
            <param name="prefix">Prefix for the key names</param>
            <returns>Number of values added to the target</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.ObjectDeconstructor">
            <summary>
            Deconstructs objects into key-value pairs
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ObjectDeconstructor.Deconstruct(System.Object[])">
            <summary>
            Deconstructs the specified objects.
            </summary>
            <param name="objects">The objects to deconstruct</param>
            <returns>
            Key value pairs generated from the objects.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ObjectDeconstructor.DeconstructInto(System.Collections.Generic.IDictionary{System.String,System.String},System.Object[])">
            <summary>
            Deconstructs the specified set of objects into a target dictionary
            </summary>
            <param name="target">The target dictionary</param>
            <param name="objects">The objects to deconstruct</param>
            <returns>
            Number of key\value pairs added to the dictionary.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ObjectDeconstructor.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compares two objects property by property and returns the difference in a dictionary
            </summary>
            <param name="before">The before object.</param>
            <param name="after">The after object.</param>
            <param name="prefix">Prefix for the key names</param>
            <returns>The difference</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ObjectDeconstructor.CompareInto(System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Object,System.String)">
            <summary>
            Compares two objects property by property and adds them to provided dictionary
            </summary>
            <param name="target">The target.</param>
            <param name="before">The before object.</param>
            <param name="after">The after object.</param>
            <param name="prefix">Prefix for the key names</param>
            <returns>Number of values added to the target</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector">
            <summary>
            Interfacoe for Power-on Self Test (POST) helpers.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.SectionMarker(System.String,System.Object[])">
            <summary>
            Print a marker in the log files.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.ReportInformation(System.String,System.Object[])">
            <summary>
            Report informational data.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.ReportWarning(System.String,System.Object[])">
            <summary>
            Report warning messages.  Will also add warning flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.ReportError(System.String,System.Object[])">
            <summary>
            Report error messages.  Will also add error flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.ReportFatalError(System.String,System.Object[])">
            <summary>
            Report fatal messages.  Will also add fatal flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPostResultCollector.ReportVasaSectionAsInformation(System.String,PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Reports the vasa section as information.
            </summary>
            <param name="tag">The tag to identify the information block.</param>
            <param name="vasaSection">The vasa section.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.POST.IPOST">
            <summary>
            Implement this for your tests to run at start up.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.IPOST.RunPost(PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Run tests in this method
            </summary>
            <param name="logger">The logger to use for messages.</param>
            <returns>Severity of errors found.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.POST.POST">
            <summary>
            A Power On Self Test implementation.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.POST.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.POST.Severity">
            <summary>
            Severity, use this if you want to update manually
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.RunPost(PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Run tests in this method
            </summary>
            <param name="logger">The logger to use for messages.</param>
            <returns>
            Severity of errors found.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.RunTests">
            <summary>
            Override to run your tests in here.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.SectionMarker(System.String,System.Object[])">
            <summary>
            Print a marker in the log files.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReportInformation(System.String,System.Object[])">
            <summary>
            Report informational data.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReportWarning(System.String,System.Object[])">
            <summary>
            Report warning messages.  Will also add warning flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReportError(System.String,System.Object[])">
            <summary>
            Report error messages.  Will also add error flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReportFatalError(System.String,System.Object[])">
            <summary>
            Report fatal messages.  Will also add fatal flag to severity.
            </summary>
            <param name="format">The format.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReportVasaSectionAsInformation(System.String,PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Reports the vasa section as information.
            </summary>
            <param name="tag">The tag to identify the information block.</param>
            <param name="vasaSection">The vasa section.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ReprotVasaSectionAsInformation(System.String,PrecisionDiscovery.Configuration.Vasa.ConfigSection)">
            <summary>
            Reports the vasa section as information.
            Added 2/26/2016. Delete this function in six months.
            </summary>
            <param name="tag">The tag to identify the information block.</param>
            <param name="vasaSection">The vasa section.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.POST.ValidateVasaBinding(Ninject.IKernel,System.String,System.String,System.String)">
            <summary>
            Validates the vasa binding.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="tag">The tag to identify the information block wih.</param>
            <param name="bindingName">Name of the binding.</param>
            <param name="sectionName">Name of the section.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.POST.PostRunner">
            <summary>
            Run startup diagnostics.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.POST.PostRunner"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.POST.PostRunner.FileName">
            <summary>
            Gets or sets the name of the file to write the POST logs to.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.POST.PostRunner.TargetName">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <value>
            The name of the target.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.POST.PostRunner.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>
            The format string.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.RunPost(System.Collections.Generic.IEnumerable{PrecisionDiscovery.Diagnostics.POST.IPOST},PrecisionDiscovery.Diagnostics.POST.PostSeverity)">
            <summary>
            Run diagnostics provided.  Not the best option, user the one with IKernel parameter
            </summary>
            <param name="posts">The posts.</param>
            <param name="haltOnOrAbove">Error level to halt the app at.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.RunPost(PrecisionDiscovery.Diagnostics.POST.PostSeverity)">
            <summary>
            Runs all diagnostics that are registered.
            </summary>
            <param name="haltOnOrAbove">Error level to halt the program at.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.HaltOnFatalError(PrecisionDiscovery.Diagnostics.POST.PostSeverity)">
            <summary>
            Halts on fatal error.
            </summary>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.HaltOnErrorOrHigher(PrecisionDiscovery.Diagnostics.POST.PostSeverity)">
            <summary>
            Halts on error or higher.
            </summary>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.HaltOnWarningOrHigher(PrecisionDiscovery.Diagnostics.POST.PostSeverity)">
            <summary>
            Halsts on warning or higher.
            </summary>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.POST.PostRunner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.POST.PostSeverity">
            <summary>
            Severity of errors found during post process.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.PostSeverity.NoError">
            <summary>
            No problems found
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.PostSeverity.Warning">
            <summary>
            Warning, important but not enough to stop.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.PostSeverity.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.POST.PostSeverity.Fatal">
            <summary>
            
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="dispatcher"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="host"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="serviceHostBase"></param>
            <param name="endpoints"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionMarshallingBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="host"></param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.ExceptionExtensions">
            <summary>
            Extensions for Exception and PDException
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ExceptionExtensions.Wrap(System.Exception,System.String,System.Object[])">
            <summary>
            Wraps an exception in a PDException or adds details to existing PDException
            </summary>
            <param name="exception">The exception to wrap</param>
            <param name="format">Add additional information to the trace log of the exception.</param>
            <param name="args">Arguments for the trace log message.</param>
            <returns>A PDException</returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.PDException">
            <summary>
            
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.PDException.Detail">
            <summary>
            Exception details.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.#ctor(PrecisionDiscovery.Diagnostics.PDExceptionDetail)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDException" /> class.
            </summary>
            <param name="detail">The details object</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.SetDescription(System.String)">
            <summary>
            Sets the description on the Detail or overwrites the existing one. If one exists push it to the trace and overwrite.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.SetMode(PrecisionDiscovery.Diagnostics.PDExceptionMode)">
            <summary>
            Sets the mode on the Detail
            </summary>
            <param name="mode">The mode</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDException" /> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDException" /> class.
            </summary>
            <param name="message">The message to be displayed to the user.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDException" /> class.
            </summary>
            <param name="message">The message to display to the user</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDException" /> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.PDExceptionDetail">
            <summary>
            DTO for PD specific exception values
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.PDExceptionDetail.Mode">
            <summary>
            Gets the mode that helps client side decide what to do.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.PDExceptionDetail.Description">
            <summary>
            Gets the friendly message that the UI should display to the user.  Also used as exception message.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.PDExceptionDetail.Trace">
            <summary>
            Additional information provided as the exception is bubbled up.
            </summary>
            <value>
            The trace.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDExceptionDetail.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.PDExceptionDetail" /> class.
            </summary>
            <param name="exception">The inner exception.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDExceptionDetail.AddTrace(System.String)">
            <summary>
            Adds the trace.
            </summary>
            <param name="details">The details.</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDExceptionDetail.LogDetail(PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Logs the details of the message
            </summary>
            <param name="log">The logger to use</param>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.PDExceptionDetail.ParseException(System.Exception)">
            <summary>
            Parses the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.PDExceptionMode">
            <summary>
            Hints on what to do on the client side
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.PDExceptionMode.Fatal">
            <summary>
            Operation failed completely
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.PDExceptionMode.Error">
            <summary>
            There was an error but not a complete failure
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.PDExceptionMode.Warning">
            <summary>
            There were some minor issues
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Diagnostics.PDExceptionMode.Retry">
            <summary>
            Retry the operation, chances are the database was edited while you were dilly dallying
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.IValidationProvider">
            <summary>
            Validation logic Interface.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IValidationProvider.GetValidationString(System.Object,System.String)">
            <summary>
            Gets the validation string.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IValidationProvider.Validate(System.Object,System.String)">
            <summary>
            Validates the specified validation rule.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IValidationProvider.IsValid(System.Object)">
            <summary>
            Valid when no validation rules have failed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.IValidationProvider.ValidateAll(System.Object)">
            <summary>
            Validates all validation rules.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.ValidatesAttribute">
            <summary>
            Validates Attribute
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.ValidatesAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.ValidatesAttribute.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.ValidatorBase">
            <summary>
            Base class for validators.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Diagnostics.ValidatorBase"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.GetValidatorCache(System.Type)">
            <summary>
            Gets the cached values for validation methods in a specific class.
            </summary>
            <param name="type">The type.</param>
            <returns>Non null cache, but can be empty.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.IsValidMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified MethodInfo is a valid validation method.
            </summary>
            <param name="mi">The MethodInfo.</param>
            <returns>
            	<c>true</c> if is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.GetValidationString(System.Object,System.String)">
            <summary>
            Gets the validation string.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.GetAllValidationStrings(System.Object)">
            <summary>
            Gets the validation string for all errors.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.IsValid(System.Object)">
            <summary>
            Valid when no validation rules have failed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.Validate(System.Object,System.String)">
            <summary>
            Validates the specified validation rule.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.ValidatorBase.ValidateAll(System.Object)">
            <summary>
            Validates all validation rules.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Err">
            <summary>
            Class for defining errors to be passed throughout the system
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.Err.Code">
            <summary>
            Unique code associated with the error.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.Err.ShortDescription">
            <summary>
            Short description of the error
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Diagnostics.Err.Description">
            <summary>
            Full description of the error
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Err.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="code">Error code</param>
            <param name="shortDescription">Short error description</param>
            <param name="description">Full error description</param>
        </member>
        <member name="T:PrecisionDiscovery.Diagnostics.Guard">
            <summary>
            Use this class to verify the function contracts.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.NotNull(System.Object,System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Throws an ArgumentNullException if the val is null.
            </summary>
            <param name="val">Object to examine.</param>
            <param name="parameter">Display name of the parameter for logs.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <example>Guard.NotNull(foo, "Foo", log);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.NotNull``1(``0,System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Throws an ArgumentNullException before assigning a null value to a variable.
            </summary>
            <typeparam name="T">Type of the value to check.</typeparam>
            <param name="val">Object to examine.</param>
            <param name="parameter">Display name of the parameter for logs.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <returns>Value if not null.</returns>
            <example>string s = Guard.NotNull&lt;string&gt;(foo, "Foo", log);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.NotNullOrEmpty(System.String,System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Check a string for null or emptiness before assigning.
            </summary>
            <param name="valueToCheck">String to check.</param>
            <param name="parameter">Display name of the string for logs.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <returns>String if is not null or empty.</returns>
            <example>string userName = Guard.NotNullOrEmpty(name, "user name", log);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.IsTrue(System.Boolean,System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Check to see if a Boolean expression is true.  If it is not will throw an exception.
            </summary>
            <param name="check">Expression to check.</param>
            <param name="message">Log message</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <example>Guard.IsTrue(users.count > 2, "Need at least two users", log);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.IsFalse(System.Boolean,System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Check to see if a Boolean expression is false.  If it is not will throw an exception.
            </summary>
            <param name="check">Expression to check.</param>
            <param name="message">Log message</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <example>Guard.IsTrue(users.count > 100, "Does not support more than 100 users.", log);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.NotNull``1(``0,PrecisionDiscovery.Diagnostics.Logging.IPDLogger,System.String,System.Object[])">
            <summary>
            Throws an ArgumentNullException before assigning a null value to a variable.
            </summary>
            <typeparam name="T">Type of the value to check.</typeparam>
            <param name="val">Object to examine.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <param name="format">Format string for error message.</param>
            <param name="args">Arguments for the format string.</param>
            <returns>Value if not null.</returns>
            <example>string s = Guard.NotNull&lt;string&gt;(foo, log, "Foo can not be null for user: {0}", user.name)</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.NotNullOrEmpty(System.String,PrecisionDiscovery.Diagnostics.Logging.IPDLogger,System.String,System.Object[])">
            <summary>
            Check a string for for null or emptyness before assigning.
            </summary>
            <param name="valueToCheck">String to check.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <param name="format">Format string for error message.</param>
            <param name="args">Arguments for the format string.</param>
            <returns>String if is not null or empty.</returns>
            <example>string userName = Guard.NotNullOrEmpty(name, log, "User name for account {0} is not provided", account.accountName);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.IsTrue(System.Boolean,PrecisionDiscovery.Diagnostics.Logging.IPDLogger,System.String,System.Object[])">
            <summary>
            Check to see if a Boolean expression is true.  If it is not will throw an exception.
            </summary>
            <param name="check">Expression to check.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <param name="format">Format string for error message.</param>
            <param name="args">Arguments for the format string.</param>
            <example>Guard.IsTrue(users.count > 2, log, "Need at least two users for account: {0}", account.name);</example>
        </member>
        <member name="M:PrecisionDiscovery.Diagnostics.Guard.IsFalse(System.Boolean,PrecisionDiscovery.Diagnostics.Logging.IPDLogger,System.String,System.Object[])">
            <summary>
            Check to see if a Boolean expression is false.  If it is not will throw an exception.
            </summary>
            <param name="check">Expression to check.</param>
            <param name="logger">If provided the logger to log this error to.</param>
            <param name="format">Format string for the error message</param>
            <param name="args">Arguments for the format string.</param>
            /// <example>Guard.IsTrue(users.count > 100, log, "Account {0} does not support more than 100 users.", account.name);</example>
        </member>
        <member name="T:PrecisionDiscovery.Interop.SECURITY_INFORMATION">
            <summary>
            Defines values that are used with the security information. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.OWNER_SECURITY_INFORMATION">
            <summary>
            OWNER_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.GROUP_SECURITY_INFORMATION">
            <summary>
            GROUP_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.DACL_SECURITY_INFORMATION">
            <summary>
            DACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.SACL_SECURITY_INFORMATION">
            <summary>
            SACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.UNPROTECTED_SACL_SECURITY_INFORMATION">
            <summary>
            UNPROTECTED_SACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.UNPROTECTED_DACL_SECURITY_INFORMATION">
            <summary>
            UNPROTECTED_DACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.PROTECTED_SACL_SECURITY_INFORMATION">
            <summary>
            PROTECTED_SACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_INFORMATION.PROTECTED_DACL_SECURITY_INFORMATION">
            <summary>
            PROTECTED_DACL_SECURITY_INFORMATION
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.SE_OBJECT_TYPE">
            <summary>
            Defines values that are used with the security information to indicate the object type. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_UNKNOWN_OBJECT_TYPE">
            <summary>
            SE_UNKNOWN_OBJECT_TYPE
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_FILE_OBJECT">
            <summary>
            SE_FILE_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_SERVICE">
            <summary>
            SE_SERVICE
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_PRINTER">
            <summary>
            SE_PRINTER
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_REGISTRY_KEY">
            <summary>
            SE_REGISTRY_KEY
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_LMSHARE">
            <summary>
            SE_LMSHARE
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_KERNEL_OBJECT">
            <summary>
            SE_KERNEL_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_WINDOW_OBJECT">
            <summary>
            SE_WINDOW_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_DS_OBJECT">
            <summary>
            SE_DS_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_DS_OBJECT_ALL">
            <summary>
            SE_DS_OBJECT_ALL
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_PROVIDER_DEFINED_OBJECT">
            <summary>
            SE_PROVIDER_DEFINED_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_WMIGUID_OBJECT">
            <summary>
            SE_WMIGUID_OBJECT
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SE_OBJECT_TYPE.SE_REGISTRY_WOW64_32KEY">
            <summary>
            SE_REGISTRY_WOW64_32KEY
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.FILETIME">
            <summary>
            The FILETIME data structure is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601. It is the means by which Win32 determines the date and time.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.FILETIME.dwLowDateTime">
            <summary>
            The low 32 bits of the Win32 date/time value.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.FILETIME.dwHighDateTime">
            <summary>
            The upper 32 bits of the Win32 date/time value.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.FILETIME.ToDateTime">
            <summary>
            Takes this FILETIME and returns an equivalent DateTime
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.FILETIME.FileTimeFromDateTime(System.DateTime)">
            <summary>
            Creates a FILETIME from a DateTime
            </summary>
            <param name="dateTime">A DateTime object.</param>
            <returns>A FILETIME</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.FILETIME.SetFileTime(System.Nullable{System.DateTime})">
            <summary>
            Sets the filetime from a nullable DateTime.
            </summary>
            <param name="dateTime">The DateTime time.</param>
            <returns>If DateTime is null, the a new FILETIME is returned. Otherwise the equivalent FILETIME is returned.</returns>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_REPLACE_EXISTING">
            <summary>
            If a file named lpNewFileName exists, the function replaces its contents with the contents of the lpExistingFileName file, provided that security requirements regarding access control lists (ACLs) are met. For more information, see the Remarks section of this topic.
            This value cannot be used if lpNewFileName or lpExistingFileName names a directory.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_COPY_ALLOWED">
            <summary>
            If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.
            This value cannot be used with MOVEFILE_DELAY_UNTIL_REBOOT.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_DELAY_UNTIL_REBOOT">
            <summary>
            The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.
            This value can be used only if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
            This value cannot be used with MOVEFILE_COPY_ALLOWED.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_WRITE_THROUGH">
            <summary>
            The function does not return until the file is actually moved on the disk.
            Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. The flush occurs at the end of the copy operation.
            This value has no effect if MOVEFILE_DELAY_UNTIL_REBOOT is set.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_CREATE_HARDLINK">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.MoveFileFlags.MOVEFILE_FAIL_IF_NOT_TRACKABLE">
            <summary>
            The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.ECreationDisposition">
            <summary>
            Options for creating a file
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.ECreationDisposition.New">
            <summary>
            Creates a new file.
            The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.ECreationDisposition.CreateAlways">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes, and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.ECreationDisposition.OpenExisting">
            <summary>
            Opens a file.
            The function fails if the file does not exist.
            For more information, see the Remarks section of this topic.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.ECreationDisposition.OpenAlways">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.ECreationDisposition.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is zero (0) bytes.
            The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.EFileAccess">
            <summary>
            File Security and Access Rights options
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAccess.GenericRead">
            <summary>
            FILE_READ_ATTRIBUTES 
            FILE_READ_DATA 
            FILE_READ_EA 
            STANDARD_RIGHTS_READ 
            SYNCHRONIZE 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAccess.GenericWrite">
            <summary>
            FILE_APPEND_DATA 
            FILE_WRITE_ATTRIBUTES 
            FILE_WRITE_DATA 
            FILE_WRITE_EA 
            STANDARD_RIGHTS_WRITE 
            SYNCHRONIZE 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAccess.GenericExecute">
            <summary>
            FILE_READ_ATTRIBUTES 
            STANDARD_RIGHTS_EXECUTE 
            SYNCHRONIZE 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAccess.GenericAll">
            <summary>
            GenericRead
            GenericWrite
            GenericExecute
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.EFileAttributes">
            <summary>
            The file attributes and flags.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Readonly">
            <summary>
            The file is read only. Applications can read the file, but cannot write to or delete it.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Hidden">
            <summary>
            The file is hidden. Do not include it in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.System">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Directory">
            <summary>
            The handle identifies a directory.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Archive">
            <summary>
            The file should be archived. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Device">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Normal">
            <summary>
            The file does not have other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Temporary">
            <summary>
            The file is being used for temporary storage. File systems avoid writing data back to mass storage if sufficient cache memory is available, because an application deletes a temporary file after a handle is closed. In that case, the system can entirely avoid writing the data. Otherwise, the data is written after the handle is closed.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.SparseFile">
            <summary>
            The file is a sparse file.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.ReparsePoint">
            <summary>
            The file or directory has an associated reparse point.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Compressed">
            <summary>
            The file or directory is compressed. 
            For a file, this means that all of the data in the file is compressed.
            For a directory, this means that compression is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Offline">
            <summary>
            The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.NotContentIndexed">
            <summary>
            The file is not to be indexed by the content indexing service.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories. For more information, see File Encryption.
            This flag has no effect if FILE_ATTRIBUTE_SYSTEM is also specified.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Write_Through">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            If FILE_FLAG_NO_BUFFERING is not also specified, so that system caching is in effect, then the data is written to the system cache, but is flushed to disk without delay.
            If FILE_FLAG_NO_BUFFERING is also specified, so that system caching is not in effect, then the data is immediately flushed to disk without going through the system cache. The operating system also requests a write-through the hard disk cache to persistent media. However, not all hardware supports this write-through capability.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.Overlapped">
            <summary>
            The file is being opened or created for asynchronous I/O. When the operation is complete, the event specified in the OVERLAPPED structure is set to the signaled state. Operations that take a significant amount of time to process return ERROR_IO_PENDING.
            If this flag is specified, the file can be used for simultaneous read and write operations. The system does not maintain the file pointer, therefore you must pass the file position to the read and write functions in the OVERLAPPED structure or update the file pointer.
            If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write functions specify an OVERLAPPED structure.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.NoBuffering">
            <summary>
            The file is being opened with no system caching. This flag does not affect hard disk caching or memory mapped files. When combined with FILE_FLAG_OVERLAPPED, the flag gives maximum asynchronous performance, because the I/O does not rely on the synchronous operations of the memory manager. However, some I/O operations take more time, because data is not being held in the cache. Also, the file metadata may still be cached. To flush the metadata to disk, use the FlushFileBuffers function.
            An application must meet certain requirements when working with files that are opened with FILE_FLAG_NO_BUFFERING:
            File access must begin at byte offsets within a file that are integer multiples of the volume sector size. 
            File access must be for numbers of bytes that are integer multiples of the volume sector size. For example, if the sector size is 512 bytes, an application can request reads and writes of 512, 1024, 1536, or 2048 bytes, but not of 335, 981, or 7171 bytes. 
            Buffer addresses for read and write operations should be sector aligned, which means aligned on addresses in memory that are integer multiples of the volume sector size. Depending on the disk, this requirement may not be enforced. 
            One way to align buffers on integer multiples of the volume sector size is to use VirtualAlloc to allocate the buffers. It allocates memory that is aligned on addresses that are integer multiples of the operating system's memory page size. Because both memory page and volume sector sizes are powers of 2, this memory is also aligned on addresses that are integer multiples of a volume sector size. Memory pages are 4-8 KB in size; sectors are 512 bytes (hard disks) or 2048 bytes (CD), and therefore, volume sectors can never be larger than memory pages.
            An application can determine a volume sector size by calling the GetDiskFreeSpace function.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.RandomAccess">
            <summary>
            The file is to be accessed randomly. The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.SequentialScan">
            <summary>
            The file is to be accessed sequentially from beginning to end. The system can use this as a hint to optimize file caching. If an application moves the file pointer for random access, optimum caching may not occur. However, correct operation is still guaranteed.
            Specifying this flag can increase performance for applications that read large files using sequential access. Performance gains can be even more noticeable for applications that read large files mostly sequentially, but occasionally skip over small ranges of bytes.
            This flag has no effect if the file system does not support cached I/O and FILE_FLAG_NO_BUFFERING.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.DeleteOnClose">
            <summary>
            The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.
            If there are existing open handles to a file, the call fails unless they were all opened with the FILE_SHARE_DELETE share mode.
            Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.BackupSemantics">
            <summary>
            The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. For more information, see Changing Privileges in a Token.
            You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle. For more information, see Directory Handles.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.PosixSemantics">
            <summary>
            The file is to be accessed according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.OpenReparsePoint">
            <summary>
            Normal reparse point processing will not occur; CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational. This flag cannot be used with the CREATE_ALWAYS flag.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.OpenNoRecall">
            <summary>
            The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileAttributes.FirstPipeInstance">
            <summary>
            
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.EFileShare">
            <summary>
            The sharing mode of an object, which can be read, write, both, or none.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileShare.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileShare.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileShare.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access or has a file mapping with write access, the function fails.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.EFileShare.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.GET_FILEEX_INFO_LEVELS">
            <summary>
            Defines values that are used with the GetFileAttributesTransacted function to specify the information level of the returned data. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard">
            <summary>
            The GetFileAttributesTransacted function retrieves a standard set of attribute information. The data is returned in a WIN32_FILE_ATTRIBUTE_DATA structure.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.GET_FILEEX_INFO_LEVELS.GetFileExMaxInfoLevel">
            <summary>
            One greater than the maximum value. Valid values for this enumeration will be less than this value.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.Win32ErrorCodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_FUNCTION">
            <summary>
            Incorrect function.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_FILE_NOT_FOUND">
            <summary>
            The system cannot find the file specified.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_PATH_NOT_FOUND">
            <summary>
            The system cannot find the path specified.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_TOO_MANY_OPEN_FILES">
            <summary>
            The system cannot open the file.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_ACCESS_DENIED">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_HANDLE">
            <summary>
            The handle is invalid.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_ARENA_TRASHED">
            <summary>
            The storage control blocks were destroyed.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_NOT_ENOUGH_MEMORY">
            <summary>
            Not enough storage is available to process this command.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_BLOCK">
            <summary>
            The storage control block address is invalid.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_BAD_ENVIRONMENT">
            <summary>
            The environment is incorrect.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_BAD_FORMAT">
            <summary>
            An attempt was made to load a program with an incorrect format.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_ACCESS">
            <summary>
            The access code is invalid.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_DATA">
            <summary>
            The data is invalid.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_OUTOFMEMORY">
            <summary>
            Not enough storage is available to complete this operation.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_INVALID_DRIVE">
            <summary>
            The system cannot find the drive specified.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.Win32ErrorCodes.ERROR_ALREADY_EXISTS">
            <summary>
            Cannot create a file when that file already exists.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.DeleteFile(System.String)">
            <summary>
            Deletes an existing file.
            </summary>
            <param name="lpFileName">The name of the file to be deleted. 
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path.
            </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.CreateFile(System.String,PrecisionDiscovery.Interop.EFileAccess,PrecisionDiscovery.Interop.EFileShare,System.IntPtr,PrecisionDiscovery.Interop.ECreationDisposition,PrecisionDiscovery.Interop.EFileAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, or named pipe. The function returns a handle that can be used to access the object.
            </summary>
            <param name="lpFileName">The name of the object to be created or opened.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File. For information on special device names, see Defining an MS-DOS Device Name.
            To specify a COM port number greater than 9, use the following syntax: "\\.\COM10". This syntax works for all port numbers and hardware that allows COM port numbers to be specified.
            To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see File Streams.
            </param>
            <param name="dwDesiredAccess">The access to the object, which can be read, write, or both.
            For more information, see File Security and Access Rights. You cannot request an access mode that conflicts with the sharing mode that is specified in an open request that has an open handle.
            If this parameter is zero (0), the application can query file and device attributes without accessing a device. This is useful for an application to determine the size of a floppy disk drive and the formats it supports without requiring a floppy in a drive. It can also be used to test for the existence of a file or directory without opening them for read or write access.
            </param>
            <param name="dwShareMode">The sharing mode of an object, which can be read, write, both, or none.
            You cannot request a sharing mode that conflicts with the access mode that is specified in an open request that has an open handle, because that would result in the following sharing violation: ERROR_SHARING_VIOLATION. For more information, see Creating and Opening Files.
            If this parameter is zero (0) and CreateFile succeeds, the object cannot be shared and cannot be opened again until the handle is closed. For more information, see the Remarks section of this topic.
            The sharing options remain in effect until you close the handle to an object.
            To enable a process to share an object while another process has the object open, use a combination of one or more of the following values to specify the access mode they can request to open the object.
            </param>
            <param name="lpSecurityAttributes">A pointer to a SECURITY_ATTRIBUTES structure that determines whether or not the returned handle can be inherited by child processes.
            If lpSecurityAttributes is NULL, the handle cannot be inherited.
            The lpSecurityDescriptor member of the structure specifies a security descriptor for an object. If lpSecurityAttributes is NULL, the object gets a default security descriptor. The access control lists (ACL) in the default security descriptor for a file or directory are inherited from its parent directory.
            The target file system must support security on files and directories for this parameter to have an effect on them, which is indicated when GetVolumeInformation returns FS_PERSISTENT_ACLS.
            CreateFile ignores lpSecurityDescriptor when opening an existing file, but continues to use the other structure members.
            </param>
            <param name="dwCreationDisposition">An action to take on files that exist and do not exist.
            For more information, see the Remarks section of this topic.
            This parameter must be one of the following values.
            </param>
            <param name="dwFlagsAndAttributes">The file attributes and flags.
            This parameter can include any combination of the file attributes. All other file attributes override FILE_ATTRIBUTE_NORMAL.
            When CreateFile opens a file, it combines the file flags with existing file attributes, and ignores any supplied file attributes.
            The following file attributes and flags are used only for file objects, not other types of objects that CreateFile creates.
            </param>
            <param name="hTemplateFile">A handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created. This parameter can be NULL.
            When opening an existing file, CreateFile ignores the template file.
            When opening a new EFS-encrypted file, the file inherits the DACL from its parent directory.
            </param>
            <returns>If the function succeeds, the return value is an open handle to a specified file. If a specified file exists before the function call and dwCreationDisposition is CREATE_ALWAYS or OPEN_ALWAYS, a call to GetLastError returns ERROR_ALREADY_EXISTS, even when the function succeeds. If a file does not exist before the call, GetLastError returns zero (0).
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.
            </returns>
            <remarks>Use the CloseHandle function to close an object handle that CreateFile returns.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.CreateSymbolicLink(System.String,System.String,System.UInt32)">
            <summary>
            Creates the symbolic link.
            </summary>
            <param name="lpSymlinkFileName">The symbolic link to be created.</param>
            <param name="lpTargetFileName">The name of the target for the symbolic link to be created.
            If lpTargetFileName has a device name associated with it, the link is treated as an absolute link; otherwise, the link is treated as a relative link.</param>
            <param name="dwFlags">Indicates whether the link target, lpTargetFileName, is a directory.
            0x0 => File
            0x1 => Directory
            </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.CreateDirectory(System.String,System.IntPtr)">
            <summary>
            Creates a new directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            </summary>
            <param name="lpPathName">
            The path of the directory to be created.
            There is a default string size limit for paths of 248 characters. This limit is related to how the CreateDirectory function parses paths.
            To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new directory. If lpSecurityAttributes  is NULL, the directory gets a default security descriptor. The ACLs in the default security descriptor for a directory are inherited from its parent directory. 
            </param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.RemoveDirectory(System.String)">
            <summary>
            Deletes an existing empty directory.
            </summary>
            <param name="lpPathName">The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the directory. </param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.FindFirstFile(System.String,PrecisionDiscovery.Interop.WIN32_FIND_DATA@)">
            <summary>
            Searches a directory for a file or subdirectory with a name that matches a specific name.
            </summary>
            <param name="lpFileName">The directory or path, and the file name, which can include wildcard characters, for example, an asterisk (*) or a question mark (?). 
            If the string ends with a wildcard, period (.), or directory name, the user must have access to the root and all subdirectories on the path.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 widecharacters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File.
            </param>
            <param name="lpFindFileData">A pointer to the WIN32_FIND_DATA structure that receives information about a found file or subdirectory.</param>
            <returns>If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose.
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.FindNextFile(System.IntPtr,PrecisionDiscovery.Interop.WIN32_FIND_DATA@)">
            <summary>
            Continues a file search from a previous call to the FindFirstFile or FindFirstFileEx function.
            </summary>
            <param name="hFindFile">The search handle returned by a previous call to the FindFirstFile or FindFirstFileEx function</param>
            <param name="lpFindFileData">A pointer to the WIN32_FIND_DATA structure that receives information about the found file or subdirectory. 
            The structure can be used in subsequent calls to FindNextFile to indicate from which file to continue the search.
            </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            If no matching files can be found, the GetLastError function returns ERROR_NO_MORE_FILES.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.FindClose(System.IntPtr)">
            <summary>
            Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, or FindFirstStreamW function.
            </summary>
            <param name="hFindFile">The file search handle. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.GetFileAttributes(System.String)">
            <summary>
            Retrieves a set of FAT file system attributes for a specified file or directory.
            </summary>
            <param name="lpFileName">The name of the file or directory. 
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File
            </param>
            <returns>If the function succeeds, the return value contains the attributes of the specified file or directory.
            If the function fails, the return value is INVALID_FILE_ATTRIBUTES. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.GetFileAttributesEx(System.String,PrecisionDiscovery.Interop.GET_FILEEX_INFO_LEVELS,PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA@)">
            <summary>
            Retrieves attributes for a specified file or directory.
            </summary>
            <param name="lpFileName">The name of the file or directory.		
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File.
            </param>
            <param name="fInfoLevelId">A class of attribute information to retrieve. </param>
            <param name="fileData">A pointer to a buffer that receives the attribute information. 
            The type of attribute information that is stored into this buffer is determined by the value of fInfoLevelId.
            </param>
            <returns>If the function succeeds, the return value is a nonzero value.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.SetFileAttributes(System.String,System.UInt32)">
             <summary>
             Sets the attributes for a file or directory.
             </summary>
             <param name="lpFileName">
             The name of the file whose attributes are to be set.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see File Names, Paths, and Namespaces.
             </param>
             <param name="dwFileAttributes">
             The file attributes to set for the file.
             This parameter can be one or more values, combined using the bitwise-OR operator. However, all other values override FILE_ATTRIBUTE_NORMAL.
             </param>
             <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="lpExistingFileName">The name of an existing file.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File.
            </param>
            <param name="lpNewFileName">The name of the new file.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File.
            </param> 
            <param name="bFailIfExists">If this parameter is TRUE and the new file specified by lpNewFileName already exists, the function fails.
            If this parameter is FALSE and the new file already exists, the function overwrites the existing file and succeeds.
            </param>         
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.MoveFileEx(System.String,System.String,PrecisionDiscovery.Interop.MoveFileFlags)">
            <summary>
            Moves an existing file or directory, including its children, with various move options.
            </summary>
            <param name="lpExistingFileName">The current name of the file or directory on the local computer.
            If dwFlags specifies MOVEFILE_DELAY_UNTIL_REBOOT, the file cannot exist on a remote share, because delayed operations are performed before the network is available.
            In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path. For more information, see Naming a File </param>
            <param name="lpNewFileName">    The new name of the file or directory on the local computer.
            When moving a file, the destination can be on a different file system or volume. If the destination is on another drive, you must set the MOVEFILE_COPY_ALLOWED flag in dwFlags.
            When moving a directory, the destination must be on the same drive.
            If dwFlags specifies MOVEFILE_DELAY_UNTIL_REBOOT and lpNewFileName is NULL, MoveFileEx registers the lpExistingFileName file to be deleted when the system restarts. If lpExistingFileName refers to a directory, the system removes the directory at restart only if the directory is empty.</param>
            <param name="dwFlags">The flags.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device.
            </summary>
            <param name="hFile">A handle to the device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe).
            The hFile parameter must have been created with read access. For more information, see Generic Access Rights and File Security and Access Rights.
            For asynchronous read operations, hFile can be any handle that is opened with the FILE_FLAG_OVERLAPPED flag by the CreateFile function, or a socket handle returned by the socket or accept function.
            </param>
            <param name="lpBuffer">
            A pointer to the buffer that receives the data read from a file or device.
            This buffer must remain valid for the duration of the read operation. The caller must not use this buffer until the read operation is completed.
            </param>
            <param name="nNumberOfBytesToRead">The maximum number of bytes to be read.</param>
            <param name="lpNumberOfBytesRead">
            A pointer to the variable that receives the number of bytes read when using a synchronous hFile parameter. ReadFile  sets this value to zero before doing any work or error checking. Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.
            This parameter can be NULL only when the lpOverlapped parameter is not NULL.
            </param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure is required if the hFile parameter was opened with FILE_FLAG_OVERLAPPED, otherwise it can be NULL.
            If hFile is opened with FILE_FLAG_OVERLAPPED, the lpOverlapped parameter must point to a valid and unique OVERLAPPED structure, otherwise the function can incorrectly report that the read operation is complete.
            For an hFile that supports byte offsets, if you use this parameter you must specify a byte offset at which to start reading from the file or device. This offset is specified by setting the Offset and OffsetHigh members of the OVERLAPPED structure. For an hFile that does not support byte offsets, Offset and OffsetHigh are ignored.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE).
            If the function fails, or is completing asynchronously, the return value is zero (FALSE). To get extended error information, call the GetLastError function. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Writes data to the specified file or input/output (I/O) device.
            </summary>
            <param name="hFile">
            A handle to the file or I/O device (for example, a file, file stream, physical disk, volume, console buffer, tape drive, socket, communications resource, mailslot, or pipe).
            The hFile parameter must have been created with the write access. For more information, see Generic Access Rights and File Security and Access Rights.
            For asynchronous write operations, hFile can be any handle opened with the CreateFile function using the FILE_FLAG_OVERLAPPED flag or a socket handle returned by the socket or accept function.
            </param>
            <param name="lpBuffer">
            A pointer to the buffer containing the data to be written to the file or device.
            This buffer must remain valid for the duration of the write operation. The caller must not use this buffer until the write operation is completed.
            </param>
            <param name="nNumberOfBytesToWrite">
            The number of bytes to be written to the file or device.
            A value of zero specifies a null write operation. The behavior of a null write operation depends on the underlying file system or communications technology.
            Pipe write operations across a network are limited to 65,535 bytes per write. For more information regarding pipes, see the Remarks section.
            </param>
            <param name="lpNumberOfBytesWritten">
            A pointer to the variable that receives the number of bytes written when using a synchronous hFile parameter. WriteFile sets this value to zero before doing any work or error checking. Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.
            This parameter can be NULL only when the lpOverlapped parameter is not NULL.
            </param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure is required if the hFile parameter was opened with FILE_FLAG_OVERLAPPED, otherwise this parameter can be NULL.
            For an hFile that supports byte offsets, if you use this parameter you must specify a byte offset at which to start writing to the file or device. This offset is specified by setting the Offset and OffsetHigh members of the OVERLAPPED structure. For an hFile that does not support byte offsets, Offset and OffsetHigh are ignored.
            To write to the end of file, specify both the Offset and OffsetHigh members of the OVERLAPPED structure as 0xFFFFFFFF. This is functionally equivalent to previously calling the CreateFile function to open hFile using FILE_APPEND_DATA access.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE).
            If the function fails, or is completing asynchronously, the return value is zero (FALSE). To get extended error information, call the GetLastError function. </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.GetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,PrecisionDiscovery.Interop.FILETIME@,PrecisionDiscovery.Interop.FILETIME@,PrecisionDiscovery.Interop.FILETIME@)">
            <summary>
            Retrieves the date and time that a file or directory was created, last accessed, and last modified.
            </summary>
            <param name="hFile">
            A handle to the file or directory for which dates and times are to be retrieved. The handle must have been created using the CreateFile function with the GENERIC_READ access right. For more information, see File Security and Access Rights.
            </param>
            <param name="lpCreationTime">
            A pointer to a FILETIME  structure to receive the date and time the file or directory was created. This parameter can be NULL if the application does not require this information.
            </param>
            <param name="lpLastAccessTime">
            A pointer to a FILETIME  structure to receive the date and time the file or directory was last accessed. The last access time includes the last time the file or directory was written to, read from, or, in the case of executable files, run. This parameter can be NULL if the application does not require this information.
            </param>
            <param name="lpLastWriteTime">
            A pointer to a FILETIME structure to receive the date and time the file or directory was last written to, truncated, or overwritten (for example, with WriteFile or SetEndOfFile). This date and time is not updated when file attributes or security descriptors are changed. This parameter can be NULL if the application does not require this information.
            </param>
            <returns>If the function succeeds, the return value is nonzero.  Will throw on error.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,PrecisionDiscovery.Interop.FILETIME@,PrecisionDiscovery.Interop.FILETIME@,PrecisionDiscovery.Interop.FILETIME@)">
            <summary>
            Sets the date and time that the specified file or directory was created, last accessed, or last modified.
            </summary>
            <param name="hFile">
            A handle to the file or directory. The handle must have been created using the CreateFile function with the FILE_WRITE_ATTRIBUTES access right. For more information, see File Security and Access Rights.
            </param>
            <param name="lpCreationTime">
            A pointer to a FILETIME  structure that contains the new creation date and time for the file or directory. This parameter can be NULL if the application does not need to change this information.
            </param>
            <param name="lpLastAccessTime">
            A pointer to a FILETIME  structure that contains the new last access date and time for the file or directory. The last access time includes the last time the file or directory was written to, read from, or (in the case of executable files) run. This parameter can be NULL if the application does not need to change this information.
            </param>
            <param name="lpLastWriteTime">
            A pointer to a FILETIME  structure that contains the new last modified date and time for the file or directory. This parameter can be NULL if the application does not need to change this information.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. Will throw on error.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.SetFileShortName(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String)">
            <summary>
            Sets the short name for the specified file. The file must be on an NTFS file system volume.
            </summary>
            <param name="hFile">A handle to the file. The file must be opened with either the GENERIC_ALL access right or GENERIC_WRITE|DELETE, and with the FILE_FLAG_BACKUP_SEMANTICS file attribute.</param>
            <param name="lpShortName">
            A pointer to a string that specifies the short name for the file.
            Specifying an empty (zero-length) string will remove the short file name, if it exists for the file specified by the hFile parameter. If a short file name does not exist, the function will do nothing and return success. 
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP/2000:  This behavior is not supported. The parameter must contain a valid string of one or more characters. 
            </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError may return one of the following error codes that are specific to this function. 
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.GetLongPathName(System.String,System.Text.StringBuilder,System.Int32)">
            <summary>
            Converts the specified path to its long form.
            </summary>
            <param name="path">The path to be converted. Supports device formatted paths</param>
            <param name="longPath">A pointer to the buffer to receive the long path. </param>
            <param name="longPathLength">The size of the buffer longPath points to.</param>
            <returns>
            If the function succeeds, the return value is the length, in TCHARs, 
            of the string copied to lpszLongPath, not including the terminating null character.
            If the lpBuffer buffer is too small to contain the path, the return value is the size, in TCHARs, 
            of the buffer that is required to hold the path and the terminating null character.
            If the function fails for any other reason, such as if the file does not exist, the return value is zero. 
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.GetSecurityInfo(System.IntPtr,PrecisionDiscovery.Interop.SE_OBJECT_TYPE,PrecisionDiscovery.Interop.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Gets the security information of a specified object.
            </summary>
            <param name="handle">A handle to the object from which to retrieve security information.</param>
            <param name="ObjectType">SE_OBJECT_TYPE enumeration value that indicates the type of object </param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the SECURITY_INFORMATION bit flags.</param>
            <param name="pSidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the owner SID.</param>
            <param name="pSidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the group SID.</param>
            <param name="pDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the DACL.</param>
            <param name="pSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the SACL.</param>
            <param name="pSecurityDescriptor">A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the LocalFree function. This parameter is required if any one of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters is not NULL.The size of the buffer longPath points to.</param>
            <returns>
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.IntFS.SetSecurityInfo(System.IntPtr,PrecisionDiscovery.Interop.SE_OBJECT_TYPE,PrecisionDiscovery.Interop.SECURITY_INFORMATION,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Sets the security information of a specified object.
            </summary>
            <param name="handle">A handle to the object for which to set security information.</param>
            <param name="ObjectType">A member of the SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter.</param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the SECURITY_INFORMATION bit flags.</param>
            <param name="pSidOwner">A pointer to a SID that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. This parameter can be NULL if you are not setting the owner SID.</param>
            <param name="pSidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. This parameter can be NULL if you are not setting the primary group SID.</param>
            <param name="pDacl">A pointer to the new DACL for the object. This parameter is ignored unless the value of the SecurityInfo parameter includes the DACL_SECURITY_INFORMATION flag. If the value of the SecurityInfo parameter includes the DACL_SECURITY_INFORMATION flag and the value of this parameter is set to NULL, full access to the object is granted to everyone. For information about null DACLs, see Creating a DACL.</param>
            <param name="pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. This parameter can be NULL if you are not setting the SACL.</param>
            <returns>
            </returns>
        </member>
        <member name="T:PrecisionDiscovery.Interop.SECURITY_ATTRIBUTES">
            <summary>
            The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable. This structure provides security settings for objects created by various functions, such as CreateFile, CreatePipe, CreateProcess, RegCreateKeyEx, or RegSaveKeyEx.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_ATTRIBUTES.nLength">
            <summary>
            The size, in bytes, of this structure. Set this value to the size of the SECURITY_ATTRIBUTES structure.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            A pointer to a security descriptor for the object that controls the sharing of it. If NULL is specified for this member, the object is assigned the default security descriptor of the calling process. This is not the same as granting access to everyone by assigning a NULL discretionary access control list (DACL). The default security descriptor is based on the default DACL of the access token belonging to the calling process. By default, the default DACL in the access token of a process allows access only to the user represented by the access token. If other users must access the object, you can either create a security descriptor with the appropriate access, or add ACEs to the DACL that grants access to a group of users.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is TRUE, the new process inherits the handle.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Interop.Win32Interop">
            <summary>
            Win32 Function signatures.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.Win32Interop.LoadLibrary(System.String)">
            <summary>
            Maps the specified executable module into the address space of the calling process.
            </summary>
            <param name="lpFileName">The name of the executable module (either a .dll or .exe file). The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file. 
            If the string specifies a path but the file does not exist in the specified directory, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/).
            If the string does not specify a path, the function uses a standard search strategy to find the file. See the Remarks for more information. </param>
            <returns>If the function succeeds, the return value is a handle to the module.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.Win32Interop.FreeLibrary(System.IntPtr)">
            <summary>
            Decrements the reference count of the loaded dynamic-link library (DLL). When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded DLL module. The LoadLibrary or GetModuleHandle function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Interop.Win32Interop.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable. The LoadLibrary or GetModuleHandle function returns this handle.</param>
            <param name="procName">The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Interop.WIN32_FIND_DATA">
            <summary>
            Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.dwFileAttributes">
            <summary>
            The file attributes of a file. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.ftCreationTime">
            <summary>
            A FILETIME structure that specifies when a file or directory was created. 
            If the underlying file system does not support creation time, this member is zero (0).
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.ftLastAccessTime">
            <summary>
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero (0).
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.ftLastWriteTime">
            <summary>
            A FILETIME structure. 
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero (0).
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.nFileSizeHigh">
            <summary>
            The high-order DWORD value of the file size, in bytes. 
            This value is zero (0) unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.nFileSizeLow">
            <summary>
            The low-order DWORD value of the file size, in bytes.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.dwReserved0">
            <summary>
            If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse tag. 
            Otherwise, this value is undefined and should not be used.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.dwReserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.cFileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FIND_DATA.cAlternate">
            <summary>
            An alternative name for the file. 
            This name is in the classic 8.3 (filename.ext) file name format.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.WIN32_FIND_DATA.GetSize">
            <summary>
            Combine the high and low size and return a single Int64
            </summary>
            <returns>File Size</returns>
        </member>
        <member name="T:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA">
            <summary>
            Contains attribute information for a file or directory. The GetFileAttributesEx function uses this structure. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.dwFileAttributes">
            <summary>
            The file system attribute information for a file or directory. 
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.ftCreationTime">
            <summary>
            A FILETIME structure that specifies when the file or directory is created
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.ftLastAccessTime">
            <summary>
            For a file, the structure specifies when the file is last read from or written to.
            For a directory, the structure specifies when the directory is created.
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. If the underlying file system does not support last access time, this member is zero.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.ftLastWriteTime">
            <summary>
            A FILETIME structure. 
            For a file, the structure specifies when the file is last written to.
            For a directory, the structure specifies when the directory is created.
            If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.nFileSizeHigh">
            <summary>
            The high-order DWORD of the file size. 
            This member does not have a meaning for directories.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.nFileSizeLow">
            <summary>
            The low-order DWORD of the file size. 
            This member does not have a meaning for directories.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Interop.WIN32_FILE_ATTRIBUTE_DATA.GetSize">
            <summary>
            Combine the high and low size and return a single Int64
            </summary>
            <returns>File Size</returns>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDFileStream">
            <summary>
            Simple extension of .Net FileStream that opens a file using Win32 API to allow for use with long paths
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.IsValidStream">
            <summary>
            Gets a value indicating whether this instance is valid stream.
            </summary>
            <value>
            <c>true</c> if this instance is valid stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.#ctor(System.String,System.IO.FileAccess,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.IO.PDFileStream"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileMode">The file mode.</param>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
            <exception cref="T:System.InvalidOperationException">Could not create PDFileStream.</exception>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.DFSDirectoryEnumerator">
            <summary>
            Walks a directory tree and fires events.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DFSDirectoryEnumerator.OnFileFound">
            <summary>
            Callback for when a file is found.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DFSDirectoryEnumerator.OnDirectoryFound">
            <summary>
            Report just relative path of the directory found
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DFSDirectoryEnumerator.OnDirectoryCompleted">
            <summary>
            Report just the relative path the directory completed.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DFSDirectoryEnumerator.OnDirectoryDetailsFound">
            <summary>
            Callback for '.' entry
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DFSDirectoryEnumerator.OnDirectoryDetailsCompleted">
            <summary>
            When a directory is completed.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.DFSDirectoryEnumerator.EvaluateDirectoryForInclusion">
            <summary>
            Callback to decide whether to include a directory in the enumeration or not.
            If provided will get called, if not provided, no-op
            Return true to include the directory.  False to skip directory and all children.
            </summary>
            <value>
            Callback.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.IO.DFSDirectoryEnumerator.Start(System.String,System.Boolean)">
            <summary>
            Start the enumeration.
            </summary>
            <param name="startDir">Root directory to start with.</param>
            <param name="skipReparsePoints">When true, no callbacks will be fired for reparse points (junctions, directory and file symbolic links).</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.DFSDirectoryEnumerator.Stop">
            <summary>
            Stop the enumeration.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDDirectorySignature">
            <summary>
            All the aspects of a directory that we care about but not related to it's location.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectorySignature.DirectoryName">
            <summary>
            Name of the directory
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectorySignature.CreationTime">
            <summary>
            Time directory was created.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectorySignature.LastAccessTime">
            <summary>
            Time directory was last accessed.  This parameter may be null
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectorySignature.LastWriteTime">
            <summary>
            Last time directory was written to.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.Equals(System.Object)">
            <summary>
            Check to see another object is equal to this one.
            </summary>
            <param name="obj">The other object</param>
            <returns>True if they are.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.op_Equality(PrecisionDiscovery.IO.PDDirectorySignature,PrecisionDiscovery.IO.PDDirectorySignature)">
            <summary>
            Compare two Dir Sigs to see if the are the same.
            </summary>
            <param name="lhs">Left Side</param>
            <param name="rhs">Right Side</param>
            <returns>True if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.op_Inequality(PrecisionDiscovery.IO.PDDirectorySignature,PrecisionDiscovery.IO.PDDirectorySignature)">
            <summary>
            Compare two Dir Sigs to see if the are the same.
            </summary>
            <param name="lhs">Left Side</param>
            <param name="rhs">Right Side</param>
            <returns>false if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.GetHashCode">
            <summary>
            Get the hash code of the sig.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.Equals(PrecisionDiscovery.IO.PDDirectorySignature)">
            <summary>
            Check to see if it's equal to another.
            </summary>
            <param name="other">The other</param>
            <returns>True if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.New(System.String,System.DateTime,System.DateTime,System.DateTime,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Create a new signature.
            </summary>
            <param name="directoryName">Required - Name of the directory.</param>
            <param name="creationTime">Required - Creation Time</param>
            <param name="lastWriteTime">Required - Modified Time</param>
            <param name="lastAccessTime">Can be Null - Access Time</param>
            <param name="log">Optional - logger to log errors to</param>
            <returns>Brand new PDDirectorySignature.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.New(PrecisionDiscovery.IO.PDDirectoryInfo,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Create a new signature
            </summary>
            <param name="info">Information about the directory</param>
            <param name="log">Optional - logger to log errors to</param>
            <returns>Brand new PDDirectorySignature.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectorySignature.Dump(System.Text.StringBuilder)">
            <summary>
            Dump a copy of the internal values.
            </summary>
            <param name="sb">StringBuilder to dump to.</param>
            <returns>StringBuilder</returns>
        </member>
        <member name="T:PrecisionDiscovery.IO.FileSearchHandler">
            <summary>
            Callback for file enumeration
            </summary>
            <param name="fi">PDFileInfo for the file</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.DirectorySearchHandler">
            <summary>
            Callback for directory enumeration.
            This will get called before any entries for a directory are sent back.
            </summary>
            <param name="dirName">Directory name</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.DirectorySearchDetailsHandler">
            <summary>
            Callback for directory enumeration.
            This will get called when the "." entry in a directory is processed.
            </summary>
            <param name="di">Directory information.</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.DirectoryEnumerator">
            <summary>
            Walks a directory tree and fires events.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DirectoryEnumerator.OnFileFound">
            <summary>
            Callback for when a file is found.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DirectoryEnumerator.OnDirectoryFound">
            <summary>
            Callback for when a directory is found
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.IO.DirectoryEnumerator.OnDirectoryDetailsFound">
            <summary>
            Callback for '.' entry
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.DirectoryEnumerator.ReportRelativePathsForFiles">
            <summary>
            Set to true paths reported for files will be relative to start directory.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.DirectoryEnumerator.Start(System.String,System.Boolean,System.Boolean)">
            <summary>
            Start the enumeration.
            </summary>
            <param name="startDir">Root directory to start with.</param>
            <param name="andSubDirectories">If true will enumerate sub directories also.</param>
            <param name="skipReparsePoints">When true, no callbacks will be fired for reparse points (junctions, directory and file symbolic links).</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.DirectoryEnumerator.Stop">
            <summary>
            Stop the enumeration.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.IO.FileSystemSource">
            <summary>
            Source of a file system.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.FileSystemSource.SourceId">
            <summary>
            Unique ID meaningful to the originating entity (that means don't count on it)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.FileSystemSource.DisplayName">
            <summary>
            Name to display to user.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.FileSystemSource.SourceType">
            <summary>
            Hit as to what type of source this is.  Expect something user friendly like:
            Computer, Network, BlueArc, etc.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.FileSystemSource.New(System.String,System.String,System.String)">
            <summary>
            Create a new instance of FileSystemSource
            </summary>
            <param name="sourceId">Source ID</param>
            <param name="displayName">Display Name</param>
            <param name="sourceType">Source Type</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDDirectory">
            <summary>
            Deals with device formatted directory paths
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDDirectory.log">
            <summary>
            Logger!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.Exists(System.String)">
            <summary>
            Check to see if a directory exists.
            </summary>
            <param name="path">Directory path</param>
            <returns>Returns true if directory exists.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.GetFiles(System.String)">
            <summary>
            Get the files in a directory
            </summary>
            <param name="path">Path to the directory, long directories OK.</param>
            <returns>List of the files.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.SearchForFiles(System.String)">
            <summary>
            Find file or files matching the search criteria.
            </summary>
            <param name="search">Search criteria for example c:\*</param>
            <returns>List of files.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.GetDirectories(System.String)">
            <summary>
            Get a list of directories
            </summary>
            <param name="path">Path of the root directory.</param>
            <returns>List of directories found in the path</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.SearchForDirectories(System.String)">
            <summary>
            Find directories matching search criteria.
            </summary>
            <param name="search">Search criteria C:\Win* or C:\Windows\System??</param>
            <returns>List of directories.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.GetDirectoryInfo(System.String)">
            <summary>
            Get directory information for a directory.
            Will throw if directory does not exist.
            </summary>
            <param name="path">Path to the directory.</param>
            <returns>PDDirectoryInfo</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.GetFullListing(System.String,System.Boolean)">
            <summary>
            Get a wire friendly listing for a directory.
            </summary>
            <param name="path">Path</param>
            <param name="populateDirChildrenHint">If set to true it will populate the HasChildren property for directories.</param>
            <returns>Directory listing.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.IsDirectoryEmpty(System.String)">
            <summary>
            Check to see if a directory is empty
            </summary>
            <param name="path">Directory path</param>
            <returns>True if empty false if it contains files or other directories.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.CreateDirectory(System.String)">
            <summary>
            Create a directory and all its sub directories.
            </summary>
            <param name="directoryPath">Path.</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.DeleteDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete a directory
            </summary>
            <param name="directoryPath">Path of the directory</param>
            <param name="ignoreIfMissing">Skip the delete if the directory does not exist.</param>
            <param name="recursive">And child directories</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.DuplicateDirectory(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Duplicate a single level directory from a source
            </summary>
            <param name="sourceRoot">Source root</param>
            <param name="destinationRoot">Destination root</param>
            <param name="relativePath">Name of the directory to copy</param>
            <param name="createRoot">Create the destination root if it doesn't exist (no meta data is copied in this case)</param>
            <param name="failIfExists">Throw an exception if destination exists.</param>
            <param name="copyDirectoryTimeStamps">Copy directory time stamps.</param>
            <returns>Signature of the source directory.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.CopyDirectoryTimeStamps(System.String,System.String)">
            <summary>
            Copy date and time stamp of one directory to another.
            </summary>
            <param name="source">Source</param>
            <param name="destination">Dest</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.SetDirectoryTimeStamps(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Sets the directory time stamps.
            </summary>
            <param name="deviceFormattedDirectoryPath">The device formatted directory path.</param>
            <param name="creationTime">The creation time. Passing in null leaves this time value unchanged.</param>
            <param name="lastAccessTime">The last access time. Passing in null leaves this time value unchanged.</param>
            <param name="lastWriteTime">The last write time. Passing in null leaves this time value unchanged.</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.SetDirectoryAccess(System.String,System.Security.AccessControl.FileSystemRights)">
            <summary>
            Set the directory access.
            </summary>
            <param name="directoryPath">Path of the directory which will be set with access</param>
            <param name="fileSystemRights">Level of access set for the directory</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectory.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="symlinkDirectoryName">Name of the symlink.</param>
            <param name="targetDirectoryName">Name of the target directory pointed at by the link.</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDDirectoryInfo">
            <summary>
            Information about a Directory!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectoryInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.Path">
            <summary>
            Path of the file (not including the file name)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.Name">
            <summary>
            File Name (not including the path)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.FullName">
            <summary>
            Path and file name combined.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.LastWriteTime">
            <summary>
            Last modified time
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.LastAccessTime">
            <summary>
            Last access time.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.HasChildren">
            <summary>
            If populated, indicates that directory has sub directories or files.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryInfo.IsReparsePoint">
            <summary>
            Is Reparse Point?
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDDirectoryListing">
            <summary>
            Wire friendly directory listing.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDirectoryListing.#ctor">
            <summary>
            Default construcctor
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryListing.Path">
            <summary>
            Path of the directory
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryListing.Files">
            <summary>
            Files in the directory
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDirectoryListing.Directories">
            <summary>
            Subdirectories in the directory
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDDriveInfo">
            <summary>
            Wire friendly drive information
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.Name">
            <summary>
            Gets the name of a drive.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.VolumeLabel">
            <summary>
            Gets the volume label of a drive.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.DriveFormat">
            <summary>
            Gets the name of the file system, such as NTFS or FAT32.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.DriveType">
            <summary>
            Gets the drive type.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.AvailableFreeSpace">
            <summary>
            Indicates the amount of available free space on a drive.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.TotalFreeSpace">
            <summary>
            Gets the total amount of free space available on a drive.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDDriveInfo.TotalSize">
            <summary>
            Gets the total size of storage space on a drive.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDDriveInfo.FromDriveInfo(System.IO.DriveInfo)">
            <summary>
            Create a new PDDriveInfo from a DriveInfo class.
            </summary>
            <param name="driveInfo">DriveInfo class to get info from.</param>
            <returns>PDDriveInfo</returns>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDFile">
            <summary>
            File utilities to deal with device formatted file names.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDFile.log">
            <summary>
            Logger!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Unicode version of win32 API to copy an existing file to a new file.
            </summary>
            <param name="existingFilePath">The name of an existing file. path</param>
            <param name="newFilePath">The name of the new file.</param>
             <param name="bFailIfExists">If this parameter is TRUE and the new file specified by newFilePath already exists, the function fails.</param>
            <returns>If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.GetFileInfo(System.String)">
            <summary>
            Get information about a file.
            </summary>
            <param name="fullFilePath">Name of an existing file.</param>
            <returns>PDFileInfo class if function succeeds, null if not.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.DeleteFile(System.String)">
            <summary>
            Delete a file, even with long file path.
            </summary>
            <param name="path">path</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.Exists(System.String)">
            <summary>
            Check to see if a file exists.
            </summary>
            <param name="path">File path</param>
            <returns>Returns true if file exists.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CopyFileEx(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies a file and calculates MD5 hash of the source file.
            </summary>
            <param name="existingFilePath">Source</param>
            <param name="newFilePath">Destination</param>
            <param name="failIfExists">If true and destination exists, it will throw an exception</param>
            <param name="copyFileAttributes">Copy the source file attributes also.</param>
            <param name="copyFileTimeStamps">Copy the source file time stamps also.</param>
            <returns>Signature of the SOURCE file.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CopyFileEx(System.Boolean@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies a file and calculates MD5 hash of the source file.
            </summary>
            <param name="stop">reference to a bool which if set to true will abort the process as soon as possible.</param>
            <param name="existingFilePath">Source</param>
            <param name="newFilePath">Destination</param>
            <param name="failIfExists">If true and destination exists, it will throw an exception</param>
            <param name="copyFileAttributes">Copy the source file attributes also.</param>
            <param name="copyFileTimeStamps">Copy the source file time stamps also.</param>
            <returns>Signature of the SOURCE file.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CopyFileEx(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies a file and calculates MD5 hash of the source file.
            </summary>
            <param name="existingFilePath">Source</param>
            <param name="newFilePath">Destination</param>
            <param name="shortName">ShortName to set the file.  If not null MUST be valid or will fail</param>
            <param name="failIfExists">If true and destination exists, it will throw an exception</param>
            <param name="copyFileAttributes">Copy the source file attributes also.</param>
            <param name="copyFileTimeStamps">Copy the source file time stamps also.</param>
            <returns>Signature of the SOURCE file.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CopyFileEx(System.Boolean@,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies a file and calculates MD5 hash of the source file.
            </summary>
            <param name="stop">reference to a bool which if set to true will abort the process as soon as possible.</param>
            <param name="existingFilePath">Source</param>
            <param name="newFilePath">Destination</param>
            <param name="shortName">ShortName to set the file.  If not null MUST be valid or will fail</param>
            <param name="failIfExists">If true and destination exists, it will throw an exception</param>
            <param name="copyFileAttributes">Copy the source file attributes also.</param>
            <param name="copyFileTimeStamps">Copy the source file time stamps also.</param>
            <returns>Signature of the SOURCE file.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.MoveFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Moves the file. Can handle long paths.
            </summary>
            <param name="existingFilePath">The existing file path.</param>
            <param name="newFilePath">The new file path.</param>
            <param name="allowCopy">if set to <c>true</c> allows copy and delete instead of move.</param>
            <param name="overwrite">if set to <c>true</c> overwrites the file if it already exists..</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.StreamToFileWithHash(System.IO.Stream,System.String)">
            <summary>
            Writes a stream to file and returns an MD5 hash.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="newFilePath">The new file path.</param>
            <returns>Byte array of MD5 hash value</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CalculateMD5Hash(System.String)">
            <summary>
            Calculate the MD5 hash of a file.  Long paths OK.
            </summary>
            <param name="filePath">File path</param>
            <returns>byte[] representing the hash.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.UpdateFileTimeStamps(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the file timestamps.
            </summary>
            <param name="filePath">The device formatted file path.</param>
            <param name="creationTime">The creation time. Passing in null leaves this time value unchanged.</param>
            <param name="lastAccessTime">The last access time. Passing in null leaves this time value unchanged.</param>
            <param name="lastWriteTime">The last write time. Passing in null leaves this time value unchanged.</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.GetFileSignature(System.String)">
            <summary>
            Get the files signature.
            WARNING - This includes a hash that requires for the whole file to be read.
            </summary>
            <param name="existingFilePath">Path</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.SetFileAccess(System.String,System.Security.AccessControl.FileSystemRights)">
            <summary>
            Set the file access.
            </summary>
            <param name="filePath">Path of the file which will be set with access</param>
            <param name="fileSystemRights">Level of access set for the file</param>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFile.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="symlinkFileName">Name of the symlink.</param>
            <param name="targetFileName">Name of the target file pointed at by the link.</param>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDFileInfo">
            <summary>
            Information about a file!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.DirectoryName">
            <summary>
            Path of the file (not including the file name)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.Name">
            <summary>
            File Name (not including the path)
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.ShortName">
            <summary>
            Short name for the file if available.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.FullName">
            <summary>
            Path and file name combined.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.LastWriteTime">
            <summary>
            Last modified time
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.LastAccessTime">
            <summary>
            Last access time.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.FileSize">
            <summary>
            Size in bytes.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.IsReadOnly">
            <summary>
            Is Read Only File?
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.IsSystemFile">
            <summary>
            Is System File?
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.IsReparsePoint">
            <summary>
            Is Reparse Point?
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileInfo.IsHidden">
            <summary>
            Is Hidden File?
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDFileSignature">
            <summary>
            All the aspects of a file that we care about but not related to it's location.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.CreationTime">
            <summary>
            Time file was created.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.LastAccessTime">
            <summary>
            Time file was last accessed.  This parameter may be null
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.LastWriteTime">
            <summary>
            Last time file was written to.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.FileSize">
            <summary>
            Size in bytes.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.MD5HashListDontUse">
            <summary>
            Currently a bug exists when serializing an array of bytes in Mass Transit (with the NetwonSoft.JSON serializer).
            As a work around, serialize a List of bytes instead.  Since MD5Hash is frequently used, SetMD5HashForSerialization 
            should be called before a serialization is required to set MD5HashSerialize from the MD5Hash.  
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.IO.PDFileSignature.MD5Hash">
            <summary>
            MD5 Hash
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.Equals(System.Object)">
            <summary>
            Check to see another object is equal to this one.
            </summary>
            <param name="obj">The other object</param>
            <returns>True if they are.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.op_Equality(PrecisionDiscovery.IO.PDFileSignature,PrecisionDiscovery.IO.PDFileSignature)">
            <summary>
            Compare two File Sigs to see if the are the same.
            </summary>
            <param name="lhs">Left Side</param>
            <param name="rhs">Right Side</param>
            <returns>True if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.op_Inequality(PrecisionDiscovery.IO.PDFileSignature,PrecisionDiscovery.IO.PDFileSignature)">
            <summary>
            Compare two File Sigs to see if the are the same.
            </summary>
            <param name="lhs">Left Side</param>
            <param name="rhs">Right Side</param>
            <returns>false if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.GetHashCode">
            <summary>
            Get Hashcode
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.Equals(PrecisionDiscovery.IO.PDFileSignature)">
            <summary>
            Check to see if it's equal to another.
            </summary>
            <param name="other">The other</param>
            <returns>True if they are</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.New(System.String,System.Int64,System.DateTime,System.DateTime,System.DateTime,System.Byte[],PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Create a new signature.
            </summary>
            <param name="fileName">Required - Name of the file.</param>
            <param name="fileSize">Required - Size in bytes.</param>
            <param name="creationTime">Required - Creation Time</param>
            <param name="lastWriteTime">Required - Modified Time</param>
            <param name="lastAccessTime">Can be Null - Access Time</param>
            <param name="MD5Hash">Required - hash</param>
            <param name="log">Optional - logger to log errors to</param>
            <returns>Brand new PDFileSignature.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.New(PrecisionDiscovery.IO.PDFileInfo,System.Byte[],PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Create a new signature
            </summary>
            <param name="info">Information about the file</param>
            <param name="MD5Hash">Hash of the file.</param>
            <param name="log">Optional - logger to log errors to</param>
            <returns>Brand new PDFileSignature.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDFileSignature.Dump(System.Text.StringBuilder)">
            <summary>
            Dump a copy of the internal values.
            </summary>
            <param name="sb">StringBuilder to dump to.</param>
            <returns>StringBuilder</returns>
        </member>
        <member name="T:PrecisionDiscovery.IO.PDPath">
            <summary>
            File utilities to deal with file or directory path information.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDPath.MAX_PATH">
            <summary>
            Max path for directories.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDPath.PD_MAX_FULL_PATH">
            <summary>
            Minimum combined path that PD tools are expected to handle.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDPath.PD_MAX_PATH">
            <summary>
            Minimum path length that PD tools are expected to handle.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.IO.PDPath.PD_MAX_FILE_NAME">
            <summary>
            Minimum file name length that PD tools are expected to handle.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.GetDeviceFormat(System.String,System.Boolean)">
            <summary>
            Convert a file path to device format.
            </summary>
            <param name="filePath">Directory path</param>
            <param name="shortPathsAlso">Don't do a length test.</param>
            <returns>Returns a device formatted version of the directory for use with Unicode version of the win32 API</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.PathFromDevicePath(System.String)">
            <summary>
            Returns a path from a device formatted path
            </summary>
            <param name="deviceFormattedPath">The device formatted path.</param>
            <returns>A path string</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extention of the path string.
            </summary>
            <param name="path">File path</param>
            <returns>The characters after the last directory character in path. 
            If the last character of path is a directory or volume separator character, this method returns String.Empty. 
            If path is null, this method returns null.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.GetParentDirectory(System.String)">
            <summary>
            Gets the parent directory of a directory or file path
            </summary>
            <param name="path">Directory or file path</param>
            <returns>Parent path or string empty if no parent can be found.  Null if null is passed in.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.IsUnicodeConversionRequired(System.String)">
            <summary>
            Check to see if long file names should be used.  This occurs when a path or 
            filename is longer than the system defined maximum length (260 characters).
            </summary>
            <param name="path">Path</param>
            <returns>True when the path length is greather or equal to the MAX_PATH.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.IsPathTooLong(System.String)">
            <summary>
            Check to see if a path is too long to use in standard file api.
            </summary>
            <param name="path">Path</param>
            <returns>True if it is too long.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.GetLongPathName(System.String)">
            <summary>
            Gets the long name of the path.
            </summary>
            <param name="shortPath">The short path.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.IsDeviceFormat(System.String)">
            <summary>
            Check to see if the path is in the \\?\ format
            </summary>
            <param name="path">path</param>
            <returns>true if it is, false if it's not.</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path
            </summary>
            <param name="path1">first part</param>
            <param name="path2">second part</param>
            <returns>Combined path, if both are empty or null will return string.Empty</returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.GetExtension(System.String)">
            <summary>
            Gets the extension. This is the same as the BCL Path.GetExtension with 
            the exception that there is no check for invalid characters
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.IO.PDPath.HasIllegalCharacters(System.String,System.Boolean)">
            <summary>
            Determines whether [has illegal characters] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <param name="checkAdditional">if set to <c>true</c> [check additional].</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Extensions.EnumerableExtensions">
            <summary>
            Extensions for IEnumerable
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.EnumerableExtensions.If``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Action{``0})">
            <summary>
            If a function returns true, call the action on all items
            </summary>
            <typeparam name="T">Type of the list</typeparam>
            <param name="me">Me.</param>
            <param name="check">Function to check</param>
            <param name="action">The action to call</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.EnumerableExtensions.If``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Action{``0})">
            <summary>
            If a value is true, call the action on all items
            </summary>
            <typeparam name="T">Type of the list</typeparam>
            <param name="me">Me.</param>
            <param name="check">Value to check</param>
            <param name="action">The action to call</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Foreach implementation for IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me">The enumeration.</param>
            <param name="action">The action to perform</param>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions">
            <summary>
            Extensions for date time
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.BeginningOfTheHour(System.DateTime)">
            <summary>
            Get the start of the hour
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.BeginningOfTheDay(System.DateTime)">
            <summary>
            Get the midnight of the day, 00:00:00
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.BeginningOfTheDay(System.Nullable{System.DateTime})">
            <summary>
            Get the midnight of the day, 12:00:00
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.BeginningOfTheMonth(System.DateTime)">
            <summary>
            Get the midnight of the first day of the month.
            </summary>
            <param name="orig">The original dateTimeExtensions</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.EndOfTheMonth(System.DateTime)">
            <summary>
            End of the month (very beginning of the first day of next Month)
            </summary>
            <param name="orig">The original date.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.EndOfTheDay(System.DateTime)">
            <summary>
            Get the time of the last second of the day, 23:59:59
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.EndOfTheDay(System.Nullable{System.DateTime})">
            <summary>
            Get the time of the last second of the day, 23:59:59
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.LastDayOfTheMonth(System.DateTime)">
            <summary>
            Beginning of the last day of the month.
            </summary>
            <param name="orig">The original date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.SameMonth(System.DateTime,System.DateTime)">
            <summary>
            check to see if a date falls within the same month as another date.
            </summary>
            <param name="orig">The original dateTimeExtensions.</param>
            <param name="compare">The date to compare to.</param>
            <returns>True if original is in the same month as compare</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.RoundDownToSec(System.DateTime)">
            <summary>
            Remove the millisecond portion of a date time.
            </summary>
            <param name="orig">The original date time.</param>
            <returns>Date time rounded down to nearest second.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.RoundDownToMin(System.DateTime)">
            <summary>
            Round down to closest minute
            </summary>
            <param name="orig">The original date time.</param>
            <returns>Date time rounded down to nearest minute </returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            Checks to see if the target date is after the source date
            </summary>
            <param name="source">the source date</param>
            <param name="target">the target date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsOnOrAfter(System.DateTime,System.DateTime)">
            <summary>
            Checks to see if the target date is on or after the source date
            </summary>
            <param name="source">the source date</param>
            <param name="target">the target date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            Checks to see if the target date is before the source date
            </summary>
            <param name="source">the source date</param>
            <param name="target">the target date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsOnOrBefore(System.DateTime,System.DateTime)">
            <summary>
            Checks to see if the target date is on or before the source date
            </summary>
            <param name="source">the source date</param>
            <param name="target">the target date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsOn(System.DateTime,System.DateTime)">
            <summary>
            Checks to see if the target date is on the source date
            </summary>
            <param name="source">the source date</param>
            <param name="target">the target date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.AsEndDate(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable datetime into DateTime.Max if it is null, othwerwise, returns the original datetime
            </summary>
            <param name="source">the source date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.AsStartDate(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable datetime into DateTime.Min if it is null, othwerwise, returns the original datetime
            </summary>
            <param name="source">the source date</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether a date is in between 2 dates
            </summary>
            <param name="source">the date</param>
            <param name="date1">the first date in a range</param>
            <param name="date2">the second date in a range</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DateTimeExtensions.DateRangeOverlaps(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether Two date ranges overlap. 
            </summary>
            <param name="date1">first date of the first range</param>
            <param name="date2">second date of the first range</param>
            <param name="date3">first date of the second range</param>
            <param name="date4">second date of the second range</param>
            <returns>True, if the two date ranges overlap</returns>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions">
            <summary>
            Extensions for Dictionary
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value or default.
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value Type</typeparam>
            <param name="dic">The dic.</param>
            <param name="key">The key.</param>
            <param name="defaultVal">The default val.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value or add.
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
            <param name="dic">The dic.</param>
            <param name="key">The key.</param>
            <param name="addFunc">The add func.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.AddValueOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds the value or replace existing value
            </summary>
            <param name="dic">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.AddRangeReplaceDuplicates``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Add another dictionary, if duplicates keys exist it will replace the old value.
            </summary>
            <typeparam name="K">The Key</typeparam>
            <typeparam name="V">The Value</typeparam>
            <param name="dic">The modified dictionary</param>
            <param name="collection">The collection to add</param>
            <returns>Original dictionary with collection added to it.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Add another dictionary, if duplicates keys exist throws and exception.
            </summary>
            <typeparam name="K">The Key</typeparam>
            <typeparam name="V">The Value</typeparam>
            <param name="dic">The modified dictionary</param>
            <param name="collection">The collection to add</param>
            <returns>Original dictionary with collection added to it.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.AddRangeReplaceDuplicates``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Add another dictionary, if duplicates keys exist it will replace the old value.
            </summary>
            <typeparam name="K">The Key</typeparam>
            <typeparam name="V">The Value</typeparam>
            <param name="dic">The modified dictionary</param>
            <param name="collection">The collection to add</param>
            <returns>Original dictionary with collection added to it.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Add another dictionary, if duplicates keys exist throws and exception.
            </summary>
            <typeparam name="K">The Key</typeparam>
            <typeparam name="V">The Value</typeparam>
            <param name="dic">The modified dictionary</param>
            <param name="collection">The collection to add</param>
            <returns>Original dictionary with collection added to it.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Extensions.StringExtensions">
            <summary>
            Some useful extensions for strings.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.StringExtensions.ConvertToBool(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts a string to bool, True/False, Yes/No are valid, case doesn't matter
            </summary>
            <param name="s">The string</param>
            <param name="defaultValue">value to return if can't figure out proper value.</param>
            <param name="throwIfInvalid">if set to <c>true</c> [throw if invalid].</param>
            <param name="emptyIsOK">if set to <c>true</c> [empty is OK]. If this is set to false it will throw on empty or null string.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.StringExtensions.ConvertToNullableBool(System.String)">
            <summary>
            Converts a string to nullable bool.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string is empty, if not result of ConvertToBool()</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.StringExtensions.ConvertToNullableInt(System.String)">
            <summary>
            Converts to nullable int
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Extensions.StringExtensions.CompareNoCase(System.String,System.String)">
            <summary>
            Shortcut implementation of string.Compare which ignores case.
            </summary>
            <param name="s">This string</param>
            <param name="compare">The other string.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Utility.StringObjectDictionary">
            <summary>
            Just so we don't have to keep redefining it.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Eventing.EventArgs`1">
            <summary>
            EventArgs with data
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Eventing.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Utility.Eventing.EventArgs`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:PrecisionDiscovery.Utility.Eventing.EventArgs`1.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:PrecisionDiscovery.Utility.Eventing.EventArgs`1.DataType">
            <summary>
            Gets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Eventing.EventHandlerHelper">
            <summary>
            Series of helper classes for EventHandler
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Eventing.EventHandlerHelper.SafeInvoke(System.EventHandler,System.Object,System.EventArgs,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Call an event handler even if one of the targets throws an exception.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="log">Optional logger.</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Eventing.EventHandlerHelper.SafeInvoke``1(System.EventHandler{``0},System.Object,``0,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Call an event handler even if one of the targets throws an exception.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="log">Optional logger.</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Eventing.EventHandlerHelper.Blast(System.EventHandler,System.Object,System.EventArgs,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Call an event handler on background thread even if one of the targets throws an exception.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="log">Optional logger.</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Eventing.EventHandlerHelper.Blast``1(System.EventHandler{``0},System.Object,``0,PrecisionDiscovery.Diagnostics.Logging.IPDLogger)">
            <summary>
            Call an event handler on background thread even if one of the targets throws an exception.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="log">Optional logger.</param>
        </member>
        <member name="T:PrecisionDiscovery.Utility.LatchingBool">
            <summary>
            A Boolean that can change state one way.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.LatchingBool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Utility.LatchingBool"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.LatchingBool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Utility.LatchingBool"/> class.
            </summary>
            <param name="initialState">Set the initial state.</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.LatchingBool.op_Implicit(PrecisionDiscovery.Utility.LatchingBool)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:PrecisionDiscovery.Utility.LatchingBool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="lb">The lb.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.LatchingBool.Set">
            <summary>
            Sets this instance to opposite of initial state if not already.
            </summary>
            <returns>Current state.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Utility.RefCounter">
            <summary>
            Counts references using IDisposable.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Utility.RefCounter.RefCount">
            <summary>
            Gets the ref count.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.RefCounter.GetRef">
            <summary>
            Call this to increase the ref count
            </summary>
            <returns>IDisoposable which when disposed will decrease the ref count.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Utility.RefCounter.OnCountUp(System.Int32)">
            <summary>
            Called when reference count goes up.
            </summary>
            <param name="current">Current count</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.RefCounter.OnCountDown(System.Int32)">
            <summary>
            Called when reference coutn goes down
            </summary>
            <param name="current">Current count</param>
        </member>
        <member name="T:PrecisionDiscovery.Utility.Retry">
            <summary>
            Helper class to retry a task several times.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Utility.Retry.MaxRetry">
            <summary>
            Default maximum number of retries.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Utility.Retry.RetryDelay">
            <summary>
            Default delay between each retry.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Retry.Do(System.Action,System.Action{System.Exception},System.Action{System.Exception,System.Int32})">
            <summary>
            Perform an action until no exception is thrown.
            </summary>
            <param name="action">Action to perform.</param>
            <param name="endLog">Action to call if there is an exception thrown on the last retry.</param>
            <param name="incLog">Action to call if there is an exception in any of the incremental retries.</param>
            <remarks>Uses the default values.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Retry.Do(System.Int32,System.Int32,System.Action,System.Action{System.Exception},System.Action{System.Exception,System.Int32})">
            <summary>
            Perform an action until no exception is thrown.
            </summary>
            <param name="count">how many tries.</param>
            <param name="delay">milliseconds to pause between retries.</param>
            <param name="action">Action to perform.</param>
            <param name="endLog">Action to call if there is an exception thrown on the last retry.</param>
            <param name="incLog">Action to call if there is an exception in any of the incremental retries.</param>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Retry.Do``1(System.Func{``0},System.Action{System.Exception},System.Action{System.Exception,System.Int32})">
            <summary>
            Perform an action until no exception is thrown.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="action">Action to perform.</param>
            <param name="endLog">Action to call if there is an exception thrown on the last retry.</param>
            <param name="incLog">Action to call if there is an exception in any of the incremental retries.</param>
            <returns>Return Value</returns>
            <remarks>Uses the default values.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Utility.Retry.Do``1(System.Int32,System.Int32,System.Func{``0},System.Action{System.Exception},System.Action{System.Exception,System.Int32})">
            <summary>
            Perform an action until no exception is thrown.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="count">how many tries.</param>
            <param name="delay">milliseconds to pause between retries.</param>
            <param name="action">Action to perform.</param>
            <param name="endLog">Action to call if there is an exception thrown on the last retry.</param>
            <param name="incLog">Action to call if there is an exception in any of the incremental retries.</param>
            <returns>Return Value</returns>
        </member>
        <member name="T:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior">
            <summary>
            Intercepts all soap calls and injects the PDAuthorization header and credentials to the message request
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.HeaderName">
            <summary>
            The header name
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.HeaderNameSpace">
            <summary>
            The header namespace
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.#ctor(PrecisionDiscovery.Authentication.IUserCredentials)">
            <summary>
            Default Constructor
            </summary>
            <param name="creds">The credentials to be written in the header</param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="clientRuntime"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="endpointDispatcher"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Behaviors.PDAuthBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="T:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute">
            <summary>
            Attribute for resolving client-server proxies. Add this Attribute to be able to serialize poco entities returned by a service.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="description"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="description"></param>
            <param name="proxy"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
             Implements a modification or extension of the service across an operation.
            </summary>
            <param name="description"></param>
            <param name="dispatch"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Serialization.ProxyResolverAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader">
            <summary>
            A header that can be added to an http client
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader.Name">
            <summary>
            Name of the header
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader.Content">
            <summary>
            Header contents
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes header information
            </summary>
            <param name="name">The name of the header</param>
            <param name="content">Header contents</param>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceHeader.ToString">
            <summary>
            Returns the propertly formatted header string
            </summary>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.JavaScriptServiceRequest">
            <summary>
            Use to call service URLs using JavaScript serializer.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Net.ServiceRequest.JavaScriptServiceRequest.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.JavaScriptServiceRequest.#ctor(System.String)">
            <summary>
            Construct a service request object that uses JavaScript serializer.
            </summary>
            <param name="baseUrl">Base url of the service.</param>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.JavaScriptServiceRequest.SerializeObject(System.Object)">
            <summary>
            Serialize the object provided.
            </summary>
            <param name="data">object to serialize</param>
            <returns>byte array representing the object serialized</returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.JavaScriptServiceRequest.DeserializeFromString``1(System.String)">
            <summary>
            Deserialize type requested from string data.
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="data">String data</param>
            <returns>Deserialized data or default(T)</returns>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.ServiceError">
            <summary>
            Used to deserialize errors received from the service.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceError.#ctor">
            <summary>
            Default constructor!
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceError.#ctor(System.String)">
            <summary>
            Constructor with details.
            </summary>
            <param name="detail">Details</param>
        </member>
        <member name="P:PrecisionDiscovery.Net.ServiceRequest.ServiceError.Detail">
            <summary>
            Details
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.PDServiceException">
            <summary>
            Exception thrown from a service call.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.PDServiceException.#ctor(System.String)">
            <summary>
            Create a PDServiceExcption with only a string message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest">
            <summary>
            Base class for Service calls
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.ServiceHeaders">
            <summary>
            Any headers to be added to the service request
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.#ctor(System.String)">
            <summary>
            Create a new Service request using the base url.
            </summary>
            <param name="baseUrl">Base url.</param>
        </member>
        <member name="P:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.TimeOut">
            <summary>
            Timeout value in milliseconds.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.AddUrl(System.String,System.String,System.String)">
            <summary>
            Add a url to the urlmap.
            </summary>
            <param name="name">Name used to refer to this URL</param>
            <param name="method">GET, PUT, POST or DELETE</param>
            <param name="relativePath">URL path, minus the base url, but including parameters in {}</param>
            <example>this._jsRequest.AddUrl("GetUserResourcesByFamily", @"GET", @"auth/resources/{userId}/{familyId}/resources/@@");</example>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.Call``1(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.Object,System.String[])">
            <summary>
            Calls a pre configured method and returns the result.
            </summary>
            <typeparam name="T">Type of result that is expected</typeparam>
            <param name="creds">User credentials</param>
            <param name="methodName">Method name to call</param>
            <param name="data">Data for the body</param>
            <param name="values">Array of values to configure the URL with.</param>
            <returns>Result if successful, default(T) if not.</returns>
            <remarks>There is not checking in here, if something goes wrong it will throw, barf, crash, etc.
            Caller shoudl handle exceptions, including invalid parameters etc.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.SendRequest``1(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.Object,System.String)">
            <summary>
            Send a request and get the result back.
            </summary>
            <typeparam name="T">Type of result expected.</typeparam>
            <param name="creds">User credentials</param>
            <param name="url">URL to call</param>
            <param name="data">Data for the body</param>
            <param name="method">GET, PUT, POST or DELETE</param>
            <returns>Result if successful, default(T) if not.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.SendRequestAsync``1(PrecisionDiscovery.Authentication.IUserCredentials,System.String,System.Object,System.String)">
            <summary>
            Send a request and get the result back.
            </summary>
            <typeparam name="T">Type of result expected.</typeparam>
            <param name="creds">User credentials</param>
            <param name="url">URL to call</param>
            <param name="data">Data for the body</param>
            <param name="method">GET, PUT, POST or DELETE</param>
            <returns>Result if successful, default(T) if not.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.SerializeObject(System.Object)">
            <summary>
            Serialize the object provided.
            </summary>
            <param name="data">object to serialize</param>
            <returns>byte array representing the object serialized</returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.ServiceRequest.DeserializeFromString``1(System.String)">
            <summary>
            Deserialize type requested from string data.
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="data">String data</param>
            <returns>Deserialized data or default(T)</returns>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceRequest.XMLServiceRequest">
            <summary>
            Use to call service URLs using XML serializer.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Net.ServiceRequest.XMLServiceRequest.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.XMLServiceRequest.#ctor(System.String)">
            <summary>
            Construct a service request object that uses XML serializer.
            </summary>
            <param name="baseUrl">Base url of the service.</param>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.XMLServiceRequest.SerializeObject(System.Object)">
            <summary>
            Serialize the object provided.
            </summary>
            <param name="data">object to serialize</param>
            <returns>byte array representing the object serialized</returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceRequest.XMLServiceRequest.DeserializeFromString``1(System.String)">
            <summary>
            Deserialize type requested from string data.
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="data">String data</param>
            <returns>Deserialized data or default(T)</returns>
        </member>
        <member name="T:PrecisionDiscovery.Net.Notification.Notification">
            <summary>
            2-11-2011 - Temporary notification class, to be replaced by a Notification Service. 
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.Notification.Notification.SendEmailNotification(System.String,System.String,PrecisionDiscovery.Configuration.Vasa.VasaClient,System.String,System.String[])">
            <summary>
            Sends the passed in email to all recipients listed in the designated Vasa section.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="vasa"></param>
            <param name="sectionName"></param>
            <param name="attachmentFileNames"></param>
        </member>
        <member name="M:PrecisionDiscovery.Net.Notification.Notification.AttachFiles(System.Net.Mail.MailMessage,System.String[])">
            <summary>
            Attach files to mail message.
            </summary>
            <param name="mailMessage"></param>
            <param name="attachmentFileNames"></param>
        </member>
        <member name="T:PrecisionDiscovery.Net.SerializableObject">
            <summary>
            Inherit from this class to handle over the wire serialization yourself.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Net.SerializableObject.SerializedString">
            <summary>
            Data Member that gets accessed when serialization occurs.
            The get triggers the serialization and the set the deserialization.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.SerializableObject.Serialize">
            <summary>
            Ovveride to generated serialized string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.SerializableObject.Deserialize(System.String)">
            <summary>
            Ovveride to re-hydrate object from serialized string
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="T:PrecisionDiscovery.Net.ServiceResponse.ServiceResponse">
            <summary>
            Base class for Service call responses
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceResponse.ServiceResponse.GetUserCredentials">
            <summary>
            Retrieves any user credentials passed in the message header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceResponse.ServiceResponse.GetHeader(System.String)">
            <summary>
            Retrieves a header from the request message
            </summary>
            <param name="headerName">The name of the header to be retrieved</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Net.ServiceResponse.ServiceResponse.GetSoapCredentials">
            <summary>
            Reads any user credentials passed in the SOAP header
            </summary>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.IEditableDataItem`1">
            <summary>
            Interface for Editable item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.GetChangedProperties">
            <summary>
            Gets the changed properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.GetAllProperties">
            <summary>
            Gets all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.ApplyChanges(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Applies the changes.
            </summary>
            <param name="target">The target.</param>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c> mismatches in dynamic properties are ignored.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.ApplyAllProperties(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Applies all properties.
            </summary>
            <param name="target">The target.</param>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c> mismatches in dynamic properties are ignored.</param>
            <returns></returns>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.IEditableDataItem`1.OriginalData">
            <summary>
            Gets the original data.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.IEditableDataItem`1.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
            <value>
              <c>true</c> if this instance is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.Revert">
            <summary>
            Reverts this instance.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.UpdateInput(`0)">
            <summary>
            Replace the underlying input object and all the property values from the source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.IEditableDataItem`1.AcceptChanges(System.Boolean,System.Boolean)">
            <summary>
            Applies all changes and updates the IsDirty flag.
            </summary>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c>  mismatches in dynamic properties are ignored.</param>
            <returns></returns>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.Editable`1">
            <summary>
            Used to create a new editable version of an object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.#ctor(`0,PrecisionDiscovery.Diagnostics.IValidationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Presentation.Editable`1"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.AddDynamicProperty(System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Func{System.Object,`0,System.Object},System.String[])">
            <summary>
            Adds the dynamic property.
            </summary>
            <param name="name">The name.</param>
            <param name="resolveFunc">The resolve func.</param>
            <param name="setFunc">The set func.</param>
            <param name="defaultFunc">The default value provider</param>
            <param name="relatedProperties">The related properties.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.AddDynamicProperty(System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.String[])">
            <summary>
            Adds the dynamic property.
            </summary>
            <param name="name">The name.</param>
            <param name="resolveFunc">The resolve func.</param>
            <param name="setFunc">The set func.</param>
            <param name="relatedProperties">The related properties.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.InterceptProperty(System.String,System.Func{System.Object,System.Object,System.Object},System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Intercept setter and getter of a property
            </summary>
            <param name="name">Name of property</param>
            <param name="OnGetFunc">Function to call when getting the value.  
            Parameters are the editable and proposed return value.
            What is returned is going to be the value the client sees.</param>
            <param name="OnSetFunc">Function to call when setting the value.
            Parameters are the editable and proposed value.
            What is returned is what actually gets set on the editable.</param>
            <returns>this</returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.LinkProperty(System.String,System.String[])">
            <summary>
            Links the property.
            </summary>
            <param name="name">The name.</param>
            <param name="relatedProperties">The related properties.</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.Editable`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Editable`1.OriginalData">
            <summary>
            Gets the original data.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.Revert">
            <summary>
            Reverts this instance.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Editable`1.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
            <value>
              <c>true</c> if this instance is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Editable`1.IsValid">
            <summary>
            Check if all validation rules have passed.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.ApplyAllProperties(System.Object,System.Boolean)">
            <summary>
            Applies all properties.
            </summary>
            <param name="target">The target.</param>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.ApplyAllProperties(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Applies all properties.
            </summary>
            <param name="target">The target.</param>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c> mismatches in dynamic properties are ignored..</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.AcceptChanges(System.Boolean,System.Boolean)">
            <summary>
            Applies all changes and updates the IsDirty flag.
            </summary>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c> mismatches in dynamic properties are ignored..</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.ApplyChanges(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Applies the changes.
            </summary>
            <param name="target">The target.</param>
            <param name="errorOnMismatch">if set to <c>true</c> [error on mismatch].</param>
            <param name="ignoreDynamicMistatch">if set to <c>true</c> mismatches in dynamic properties are ignored..</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.GetAllProperties">
            <summary>
            Gets all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.GetChangedProperties">
            <summary>
            Gets the changed properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.GetProperties(System.Boolean)">
            <summary>
            Gets the properties.
            </summary>
            <param name="changedOnly">if set to <c>true</c> [changed only].</param>
            <returns></returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Editable`1.UpdateInput(`0)">
            <summary>
            Replace the underlying input object and all the property values from the source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.BooleanLock">
            <summary>
            Use to lock a resource base on ref counts.
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.BooleanLock.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Presentation.BooleanLock"/> class.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.BooleanLock.Locked">
            <summary>
            Gets a value indicating whether this <see cref="T:PrecisionDiscovery.Presentation.BooleanLock"/> is locked.
            </summary>
            <value><c>true</c> if locked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.AddRef">
            <summary>
            Adds a reference to the lock, locks if there are no pending references.
            </summary>
            <returns>IDisposable that will remove reference when disposed.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.Lock">
            <summary>
            Call this to lock the object.
            </summary>
            <returns>
            IDisposable object, that unlocks when disposed.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.AlsoWatch(PrecisionDiscovery.Presentation.ILock)">
            <summary>
            Add other locks to watch to control the locking and unlocking of this lock.
            </summary>
            <param name="otherLock">The other lock.</param>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.BooleanLock.LockStateChanged">
            <summary>
            Occurs when Lock status changes
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.OnCountUp(System.Int32)">
            <summary>
            Called when reference count goes up.
            </summary>
            <param name="current">Current count</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.OnCountDown(System.Int32)">
            <summary>
            Called when reference coutn goes down
            </summary>
            <param name="current">Current count</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.OnLockStatusChanged(System.Boolean)">
            <summary>
            Called when [lock status changed].
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BooleanLock.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:PrecisionDiscovery.Presentation.BooleanLock"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.ControlEnableLock">
            <summary>
            Enable and disable a control.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.ControlEnableLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Presentation.ControlEnableLock"/> class.
            Without a control.  You'd have to use the Lock property.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.ControlEnableLock.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Presentation.ControlEnableLock"/> class.
            If control is provided it will change it's enabled property.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.ControlEnableLock.OnLockStatusChanged(System.Boolean)">
            <summary>
            Called when [lock status changed].
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.ILock">
            <summary>
            Interface for objects that provide a lock
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.ILock.Lock">
            <summary>
            Call this to lock the object.
            </summary>
            <returns>IDisposable object, that unlocks when disposed.</returns>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.ILock.Locked">
            <summary>
            Gets a value indicating whether this <see cref="T:PrecisionDiscovery.Presentation.ILock"/> is locked.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.ILock.LockStateChanged">
            <summary>
            Occurs when Lock status changes
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.LockStateEventArgs">
            <summary>
            Event args for lock state changes
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.LockStateEventArgs.LockState">
            <summary>
            Gets a value indicating the status of the lock at the time of the event.
            Note that this might change by the time the event is consumed.
            Check again before taking action.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.WaitCursorLock">
            <summary>
            Switch the cursor to wait cursor until it's disposed.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.WaitCursorLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrecisionDiscovery.Presentation.WaitCursorLock"/> class.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.WaitCursorLock.Dispose">
            <summary>
            Switch the cursor back if lock count hits zero.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.WaitCursorLock.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:PrecisionDiscovery.Presentation.WaitCursorLock"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.Config">
            <summary>
            Configuration class to set up actions for the BackgroundTask class.  
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.OnBackGround">
            Action that represents the primary code to execute in the task on a background thread.
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.OnForeGround">
            Continuation action to call when primary action completes. 
            It is called on the thread that the current dispatcher was created on.
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.OnSuccess">
            <summary>
            Action to perform if the background task finishes with out throwing an exception.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.OnError">
            Action to call if an exception occurs.
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.Regardless">
            Action to call after execution
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Config.Dispatcher">
            <summary>
            Gets or sets the dispatcher to use, defaults to current dispatcher.
            </summary>
            <value>Current Dispatcher by default.</value>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Config.Using(System.IDisposable[])">
            <summary>
            Add disposables that you want disposed here.  The will be disposed on forground thread.
            </summary>
            <param name="disposables">List of disposables.</param>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.BackgroundTask">
            <summary>
            Helper class to perform a target action on a background thread.  Once it has completed, the continuation action will be
            called on the thread the Current Dispatcher was created on.  It most cases this will be the UI thread.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.BackgroundTask.Do(System.Action{PrecisionDiscovery.Presentation.Config})">
            <summary>
            Perform a task on a background thread.
            When c.OnBackGround action completes successfully, the c.OnForeGround action will be called on the thread that the dispatcher was created on.
            If an exception occur, the exception action will be called on the thread that the dispatcher was created on.
            </summary>
            <param name="configure">Configure the actions for OnBackGround, OnForeGround, and OnError.</param>
        </member>
        <member name="T:PrecisionDiscovery.Presentation.Input.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.Execute(`0)"/> and <see cref="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecute(`0)"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:PrecisionDiscovery.Presentation.Input.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <remarks><seealso cref="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:PrecisionDiscovery.Presentation.Input.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null" />.</exception>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecuteChanged"/> on the UI thread so every command invoker
            can requery to check if the command can execute.
            <remarks>Note that this will trigger the execution of <see cref="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecute(`0)"/> once for each invoker.</remarks>
            </summary>
        </member>
        <member name="E:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.IsActive"/> property changes.
            </summary>
        </member>
        <member name="P:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:PrecisionDiscovery.Presentation.Input.DelegateCommand`1.CanExecuteChanged"/> on the UI thread so every command invoker can requery to check if the command can execute.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle">
            <summary>Handle to an access token.</summary>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle.ReleaseHandle">
            <summary>Releases the handle.</summary>
            <returns>Value indicating if the handle released successfully.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult">
            <summary>Result from a privilege adjustment.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None">
            <summary>Privilege not modified.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.PrivilegeModified">
            <summary>Privilege modified.</summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege">
            <summary>Privilege determining the type of system operations that can be performed.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.AssignPrimaryToken">
            <summary>Privilege to replace a process-level token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Audit">
            <summary>Privilege to generate security audits.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Backup">
            <summary>Privilege to backup files and directories.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.ChangeNotify">
            <summary>Privilege to bypass traverse checking.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.CreateGlobal">
            <summary>Privilege to create global objects.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.CreatePageFile">
            <summary>Privilege to create a pagefile.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.CreatePermanent">
            <summary>Privilege to create permanent shared objects.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.CreateSymbolicLink">
            <summary>Privilege to create symbolic links.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.CreateToken">
            <summary>Privilege to create a token object.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Debug">
            <summary>Privilege to debug programs.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.EnableDelegation">
            <summary>Privilege to enable computer and user accounts to be trusted for delegation.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Impersonate">
            <summary>Privilege to impersonate a client after authentication.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.IncreaseBasePriority">
            <summary>Privilege to increase scheduling priority.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.IncreaseQuota">
            <summary>Privilege to adjust memory quotas for a process.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.IncreaseWorkingSet">
            <summary>Privilege to increase a process working set.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.LoadDriver">
            <summary>Privilege to load and unload device drivers.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.LockMemory">
            <summary>Privilege to lock pages in memory.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.MachineAccount">
            <summary>Privilege to add workstations to domain.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.ManageVolume">
            <summary>Privilege to manage the files on a volume.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.ProfileSingleProcess">
            <summary>Privilege to profile single process.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Relabel">
            <summary>Privilege to modify an object label.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.RemoteShutdown">
            <summary>Privilege to force shutdown from a remote system.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Restore">
            <summary>Privilege to restore files and directories.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Security">
            <summary>Privilege to manage auditing and security log.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Shutdown">
            <summary>Privilege to shut down the system.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.SyncAgent">
            <summary>Privilege to synchronize directory service data.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.SystemEnvironment">
            <summary>Privilege to modify firmware environment values.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.SystemProfile">
            <summary>Privilege to profile system performance.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.SystemTime">
            <summary>Privilege to change the system time.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.TakeOwnership">
            <summary>Privilege to take ownership of files or other objects.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.TrustedComputerBase">
            <summary>Privilege to act as part of the operating system.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.TimeZone">
            <summary>Privilege to change the time zone.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.TrustedCredentialManagerAccess">
            <summary>Privilege to access Credential Manager as a trusted caller.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.Undock">
            <summary>Privilege to remove computer from docking station.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.Privilege.UnsolicitedInput">
            <summary>Privilege to read unsolicited input from a terminal device.</summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState">
            <summary>State of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>, derived from <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes"/>.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState.Disabled">
            <summary>
            Privilege is disabled.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState.Enabled">
            <summary>
            Privilege is enabled.
            </summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState.Removed">
            <summary>
            Privilege is removed.
            </summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes">
            <summary>
                <para>Privilege attributes that augment a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> with state information.</para>
            </summary>
            <remarks>
                <para>Use the following checks to interpret privilege attributes:</para>
                <para>
                    <c>// Privilege is disabled.<br/>if (attributes == PrivilegeAttributes.Disabled) { /* ... */ }</c>
                </para>
                <para>
                    <c>// Privilege is enabled.<br/>if ((attributes &amp; PrivilegeAttributes.Enabled) == PrivilegeAttributes.Enabled) { /* ... */ }</c>
                </para>
                <para>
                    <c>// Privilege is removed.<br/>if ((attributes &amp; PrivilegeAttributes.Removed) == PrivilegeAttributes.Removed) { /* ... */ }</c>
                </para>
                <para>To avoid having to work with a flags based enumerated type, use <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes)"/> on attributes.</para>
            </remarks>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes.Disabled">
            <summary>Privilege is disabled.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes.EnabledByDefault">
            <summary>Privilege is enabled by default.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes.Enabled">
            <summary>Privilege is enabled.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes.Removed">
            <summary>Privilege is removed.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes.UsedForAccess">
            <summary>Privilege used to gain access to an object or service.</summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights">
            <summary>Access rights for access tokens.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AssignPrimary">
            <summary>Right to attach a primary token to a process.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Duplicate">
            <summary>Right to duplicate an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Impersonate">
            <summary>Right to attach an impersonation access token to a process.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Query">
            <summary>Right to query an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.QuerySource">
            <summary>Right to query the source of an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustPrivileges">
            <summary>Right to enable or disable the privileges in an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustGroups">
            <summary>Right to adjust the attributes of the groups in an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustDefault">
            <summary>Right to change the default owner, primary group, or DACL of an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustSessionId">
            <summary>Right to adjust the session ID of an access token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AllAccess">
            <summary>Combines all possible access rights for a token.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Read">
            <summary>Combines the standard rights required to read with <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Query"/>.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Write">
            <summary>Combines the standard rights required to write with <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustDefault"/>, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustGroups"/> and <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AdjustPrivileges"/>.</summary>
        </member>
        <member name="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Execute">
            <summary>Combines the standard rights required to execute with <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.Impersonate"/>.</summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.NativeMethods">
            <summary>Static class containing Win32 native methods.</summary>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes">
            <summary>Structure that links <see cref="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.Privilege"/> and <see cref="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.PrivilegeAttributes"/> together.</summary>
        </member>
        <member name="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.Privilege">
            <summary>Gets the privilege.</summary>
            <value>The privilege.</value>
        </member>
        <member name="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.PrivilegeAttributes">
            <summary>Gets the privilege attributes.</summary>
            <value>The privilege attributes.</value>
        </member>
        <member name="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.PrivilegeState">
            <summary>Gets the privilege state.</summary>
            <value>The privilege state.</value>
            <remarks>Derived from <see cref="P:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.PrivilegeAttributes"/>.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.op_Equality(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes,PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes)">
            <summary>Compares two instances for equality.</summary>
            <param name="first">First instance.</param>
            <param name="second">Second instance.</param>
            <returns>Value indicating equality of instances.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.op_Inequality(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes,PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes)">
            <summary>Compares two instances for inequality.</summary>
            <param name="first">First instance.</param>
            <param name="second">Second instance.</param>
            <returns>Value indicating inequality of instances.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns>Value indicating whether this instance and a specified object are equal.</returns>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes.Equals(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributes)">
            <summary>Indicates whether this instance and another instance are equal.</summary>
            <param name="other">Another instance to compare to.</param>
            <returns>Value indicating whether this instance and another instance are equal.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributesCollection">
            <summary>Read-only collection of privilege and attributes.</summary>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAndAttributesCollection.ToString">
            <summary>Returns a <see cref="T:System.String"/> representation of the collection.</summary>
            <returns><see cref="T:System.String"/> representation of the collection.</returns>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler">
            <summary>Enables privileges on a process in a safe way, ensuring that they are returned to their original state when an operation that requires a privilege completes.</summary>
            <example>
                <code>
            using System;
            using System.Diagnostics;
            using ProcessPrivileges;
            
            internal static class PrivilegeEnablerExample
            {
                public static void Main()
                {
                    Process process = Process.GetCurrentProcess();
            
                    using (new PrivilegeEnabler(process, Privilege.TakeOwnership))
                    {
                        // Privilege is enabled within the using block.
                        Console.WriteLine(
                            "{0} => {1}",
                            Privilege.TakeOwnership,
                            process.GetPrivilegeState(Privilege.TakeOwnership));
                    }
            
                    // Privilege is disabled outside the using block.
                    Console.WriteLine(
                        "{0} => {1}",
                        Privilege.TakeOwnership,
                        process.GetPrivilegeState(Privilege.TakeOwnership));
                }
            }
                </code>
            </example>
            <remarks>
                <para>When disabled, privileges are enabled until the instance of the PrivilegeEnabler class is disposed.</para>
                <para>If the privilege specified is already enabled, it is not modified and will not be disabled when the instance of the PrivilegeEnabler class is disposed.</para>
                <para>If desired, multiple privileges can be specified in the constructor.</para>
                <para>If using multiple instances on the same process, do not dispose of them out-of-order. Making use of a using statement, the recommended method, enforces this.</para>
                <para>For more information on privileges, see:</para>
                <para><a href="http://msdn.microsoft.com/en-us/library/aa379306.aspx">Privileges</a></para>
                <para><a href="http://msdn.microsoft.com/en-us/library/bb530716.aspx">Privilege Constants</a></para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.#ctor(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle)">
            <summary>Initializes a new instance of the PrivilegeEnabler class.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which privileges should be enabled.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when another instance exists and has not been disposed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.#ctor(System.Diagnostics.Process)">
            <summary>Initializes a new instance of the PrivilegeEnabler class.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which privileges should be enabled.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when another instance exists and has not been disposed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.#ctor(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege[])">
            <summary>Initializes a new instance of the PrivilegeEnabler class with the specified privileges to be enabled.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which privileges should be enabled.</param>
            <param name="privileges">The privileges to be enabled.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.#ctor(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege[])">
            <summary>Initializes a new instance of the PrivilegeEnabler class with the specified privileges to be enabled.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which privileges should be enabled.</param>
            <param name="privileges">The privileges to be enabled.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.Finalize">
            <summary>Finalizes an instance of the PrivilegeEnabler class.</summary>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.Dispose">
            <summary>Disposes of an instance of the PrivilegeEnabler class.</summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.Demand">Requires the call stack to have FullTrust.</permission>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler.EnablePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Enables the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</summary>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be enabled.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is already enabled, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is owned by another instance of the PrivilegeEnabler class, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
                <para>If a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is removed from a process, it cannot be enabled.</para>
            </returns>
            <remarks>
                <para>When disabled, privileges are enabled until the instance of the PrivilegeEnabler class is disposed.</para>
                <para>If the privilege specified is already enabled, it is not modified and will not be disabled when the instance of the PrivilegeEnabler class is disposed.</para>
            </remarks>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
        </member>
        <member name="T:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions">
            <summary>Provides extension methods to the <see cref="T:System.Diagnostics.Process" /> class, implementing the functionality necessary to query, enable, disable or remove privileges on a process.</summary>
            <example>
                <code>
            using System;
            using System.Diagnostics;
            using System.Linq;
            using ProcessPrivileges;
            
            internal static class ProcessPrivilegesExample
            {
                public static void Main()
                {
                    // Get the current process.
                    Process process = Process.GetCurrentProcess();
            
                    // Get the privileges and associated attributes.
                    PrivilegeAndAttributesCollection privileges = process.GetPrivileges();
            
                    int maxPrivilegeLength = privileges.Max(privilege =&gt; privilege.Privilege.ToString().Length);
            
                    foreach (PrivilegeAndAttributes privilegeAndAttributes in privileges)
                    {
                        // The privilege.
                        Privilege privilege = privilegeAndAttributes.Privilege;
            
                        // The privilege state.
                        PrivilegeState privilegeState = privilegeAndAttributes.PrivilegeState;
            
                        // Write out the privilege and its state.
                        Console.WriteLine(
                            "{0}{1} =&gt; {2}",
                            privilege,
                            GetPadding(privilege.ToString().Length, maxPrivilegeLength),
                            privilegeState);
                    }
            
                    Console.WriteLine();
            
                    // Privileges can only be enabled on a process if they are disabled.
                    if (process.GetPrivilegeState(Privilege.TakeOwnership) == PrivilegeState.Disabled)
                    {
                        // Enable the TakeOwnership privilege on it.
                        AdjustPrivilegeResult result = process.EnablePrivilege(Privilege.TakeOwnership);
            
                        // Get the state of the TakeOwnership privilege.
                        PrivilegeState takeOwnershipState = process.GetPrivilegeState(Privilege.TakeOwnership);
            
                        // Write out the TakeOwnership privilege, its state and the result.
                        Console.WriteLine(
                            "{0}{1} =&gt; {2} ({3})",
                            Privilege.TakeOwnership,
                            GetPadding(Privilege.TakeOwnership.ToString().Length, maxPrivilegeLength),
                            takeOwnershipState,
                            result);
                    }
                }
            
                private static string GetPadding(int length, int maxLength)
                {
                    int paddingLength = maxLength - length;
                    char[] padding = new char[paddingLength];
                    for (int i = 0; i &lt; paddingLength; i++)
                    {
                        padding[i] = ' ';
                    }
            
                    return new string(padding);
                }
            }
                </code>
                <code>
            using System;
            using System.Diagnostics;
            using ProcessPrivileges;
            
            internal static class ReusingAccessTokenHandleExample
            {
                public static void Main()
                {
                    // Access token handle reused within the using block.
                    using (AccessTokenHandle accessTokenHandle =
                        Process.GetCurrentProcess().GetAccessTokenHandle(
                            TokenAccessRights.AdjustPrivileges | TokenAccessRights.Query))
                    {
                        // Enable privileges using the same access token handle.
                        AdjustPrivilegeResult backupResult = accessTokenHandle.EnablePrivilege(Privilege.Backup);
                        AdjustPrivilegeResult restoreResult = accessTokenHandle.EnablePrivilege(Privilege.Restore);
            
                        Console.WriteLine(
                            "{0} => {1} ({2})",
                            Privilege.Backup,
                            accessTokenHandle.GetPrivilegeState(Privilege.Backup),
                            backupResult);
            
                        Console.WriteLine(
                            "{0} => {1} ({2})",
                            Privilege.Restore,
                            accessTokenHandle.GetPrivilegeState(Privilege.Restore),
                            restoreResult);
                    }
                }
            }
                </code>
            </example>
            <remarks>
                <para>For more information on privileges, see:</para>
                <para><a href="http://msdn.microsoft.com/en-us/library/aa379306.aspx">Privileges</a></para>
                <para><a href="http://msdn.microsoft.com/en-us/library/bb530716.aspx">Privilege Constants</a></para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.DisablePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Disables the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be disabled.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is already disabled, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>The caller must have permission to query and adjust token privileges on the target process.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.DisablePrivilege(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Disables the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be disabled.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is already disabled, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>If you are adjusting multiple privileges on a process, consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.DisablePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> with an access token handle for the process.</para>
                <para>The caller must have permission to query and adjust token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.EnablePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Enables the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be enabled.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is already enabled, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Enabling a privilege allows a process to perform system-level actions that it could not previously.</para>
                <para>Before enabling a privilege, many potentially dangerous, thoroughly verify that functions or operations in your code actually require them.</para>
                <para>It is not normally appropriate to hold privileges for the lifetime of a process. Use sparingly; enable when needed, disable when not.</para>
                <para>Consider using <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler"/> that enables privileges on a process in a safe way, ensuring that they are returned to their original state when an operation that requires a privilege completes.</para>
                <para>The caller must have permission to query and adjust token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.EnablePrivilege(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Enables the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be enabled.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>If the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is already enabled, <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.AdjustPrivilegeResult.None"/> is returned.</para>
                <para>If a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> is removed from a process, it cannot be enabled.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Enabling a privilege allows a process to perform system-level actions that it could not previously.</para>
                <para>Before enabling a privilege, many potentially dangerous, thoroughly verify that functions or operations in your code actually require them.</para>
                <para>It is not normally appropriate to hold privileges for the lifetime of a process. Use sparingly; enable when needed, disable when not.</para>
                <para>Consider using <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeEnabler"/> that enables privileges on a process in a safe way, ensuring that they are returned to their original state when an operation that requires a privilege completes.</para>
                <para>If you are adjusting multiple privileges on a process, consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.EnablePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> with an access token handle for the process.</para>
                <para>The caller must have permission to query and adjust token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetAccessTokenHandle(System.Diagnostics.Process)">
            <summary>Gets an access token handle for a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which an access token handle should be retrieved.</param>
            <returns>An access token handle for a <see cref="T:System.Diagnostics.Process"/> with <see cref="F:PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights.AllAccess"/> access rights.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>The caller must have permission to acquire an access token handle with all access rights.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetAccessTokenHandle(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.TokenAccessRights)">
            <summary>Gets an access token handle for a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which an access token handle should be retrieved.</param>
            <param name="tokenAccessRights">The desired access rights for the access token handle.</param>
            <returns>An access token handle for a <see cref="T:System.Diagnostics.Process"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>The caller must have permission to acquire an access token handle with the desired access rights.</para>
                <para>To query permissions, the access token handle must have permission to query and adjust token privileges:</para>
                <c>TokenAccessRights.Query</c>
                <para>To enable, disable or remove a permission, the access token handle must have permission to query and adjust token privileges:</para>
                <c>TokenAccessRights.AdjustPrivileges | TokenAccessRights.Query</c>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeAttributes(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Gets the attributes for a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on which the attributes should be retrieved.</param>
            <returns>The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes"/> for a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> as it avoids the need to work with a flags based enumerated type.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeAttributes(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Gets the attributes for a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on which the attributes should be retrieved.</param>
            <returns>The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes"/> for a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> on a <see cref="T:System.Diagnostics.Process"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> as it avoids the need to work with a flags based enumerated type.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivileges(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle)">
            <summary>Gets the privileges and associated attributes from a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <returns>The privileges associated with a process.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes)"/> on attributes within the collection as it avoids the need to work with a flags based enumerated type.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivileges(System.Diagnostics.Process)">
            <summary>Gets the privileges and associated attributes from a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <returns>The privileges associated with a process.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes)"/> method on attributes within the collection as it avoids the need to work with a flags based enumerated type.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Gets the state of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> that should be checked.</param>
            <returns>The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Derives <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeAttributes(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> to establish the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Gets the state of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> that should be checked.</param>
            <returns>The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>Derives <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeAttributes(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> to establish the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</para>
                <para>The caller must have permission to query token privileges on the target process.</para>
            </remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.GetPrivilegeState(PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes)">
            <summary>Gets the state of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</summary>
            <param name="privilegeAttributes">The privilege attributes.</param>
            <returns>The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <remarks>Derives <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeAttributes"/> to establish the <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.PrivilegeState"/> of a <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/>.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.RemovePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Removes the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> from a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="accessTokenHandle">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle"/> for a <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be removed.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>Once a privilege has been removed from a process, it cannot be restored afterwards.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>The caller must have permission to query and adjust token privileges on the target process.</remarks>
        </member>
        <member name="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.RemovePrivilege(System.Diagnostics.Process,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)">
            <summary>Removes the specified <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> from a <see cref="T:System.Diagnostics.Process"/>.</summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> on which the operation should be performed.</param>
            <param name="privilege">The <see cref="T:PrecisionDiscovery.Security.ProcessPrivileges.Privilege"/> to be removed.</param>
            <returns>
                <para>Result from the privilege adjustment.</para>
                <para>Once a privilege has been removed from a process, it cannot be restored afterwards.</para>
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an underlying Win32 function call does not succeed.</exception>
            <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">Requires the immediate caller to have FullTrust.</permission>
            <remarks>
                <para>If you are adjusting multiple privileges on a process, consider using <see cref="M:PrecisionDiscovery.Security.ProcessPrivileges.ProcessExtensions.RemovePrivilege(PrecisionDiscovery.Security.ProcessPrivileges.AccessTokenHandle,PrecisionDiscovery.Security.ProcessPrivileges.Privilege)"/> with an access token handle for the process.</para>
                <para>The caller must have permission to query and adjust token privileges on the target process.</para>
            </remarks>
        </member>
    </members>
</doc>
